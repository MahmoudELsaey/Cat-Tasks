
AVR_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002aca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00002aca  00002b3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001ee4  00000000  00000000  00002b64  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d4c  00000000  00000000  00004a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005794  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000058d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000768d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008578  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009328  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009715  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009ee3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 17 10 	call	0x202e	; 0x202e <main>
      7a:	0c 94 63 15 	jmp	0x2ac6	; 0x2ac6 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 46 12 	jmp	0x248c	; 0x248c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 e6       	ldi	r26, 0x63	; 99
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 62 12 	jmp	0x24c4	; 0x24c4 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 46 12 	jmp	0x248c	; 0x248c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 e6       	ldi	r24, 0x63	; 99
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 62 12 	jmp	0x24c4	; 0x24c4 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <ExtractOperands>:
#include "Calc_int.h"


#include <stdbool.h>

s32 ExtractOperands(u8 *expr, s32 *operand1, s32 *operand2, u8 *operator) {
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	67 97       	sbiw	r28, 0x17	; 23
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	99 87       	std	Y+9, r25	; 0x09
     b4c:	88 87       	std	Y+8, r24	; 0x08
     b4e:	7b 87       	std	Y+11, r23	; 0x0b
     b50:	6a 87       	std	Y+10, r22	; 0x0a
     b52:	5d 87       	std	Y+13, r21	; 0x0d
     b54:	4c 87       	std	Y+12, r20	; 0x0c
     b56:	3f 87       	std	Y+15, r19	; 0x0f
     b58:	2e 87       	std	Y+14, r18	; 0x0e
    // Convert operands to integers
    *operand1 = atoi(operand1Str);
    *operand2 = atoi(operand2Str);

    return OK;
}
     b5a:	2d b7       	in	r18, 0x3d	; 61
     b5c:	3e b7       	in	r19, 0x3e	; 62
     b5e:	3f 8b       	std	Y+23, r19	; 0x17
     b60:	2e 8b       	std	Y+22, r18	; 0x16
#include "Calc_int.h"


#include <stdbool.h>

s32 ExtractOperands(u8 *expr, s32 *operand1, s32 *operand2, u8 *operator) {
     b62:	8d b7       	in	r24, 0x3d	; 61
     b64:	9e b7       	in	r25, 0x3e	; 62
     b66:	99 8b       	std	Y+17, r25	; 0x11
     b68:	88 8b       	std	Y+16, r24	; 0x10

	// Find the operator index in the expression
    u8 operatorIndex = -1;
     b6a:	8f ef       	ldi	r24, 0xFF	; 255
     b6c:	8b 83       	std	Y+3, r24	; 0x03
    if(expr[0]== '-')
     b6e:	e8 85       	ldd	r30, Y+8	; 0x08
     b70:	f9 85       	ldd	r31, Y+9	; 0x09
     b72:	80 81       	ld	r24, Z
     b74:	8d 32       	cpi	r24, 0x2D	; 45
     b76:	09 f0       	breq	.+2      	; 0xb7a <ExtractOperands+0x44>
     b78:	46 c0       	rjmp	.+140    	; 0xc06 <ExtractOperands+0xd0>
    {
        for (u8 i = 1; i < MAX_DIGIT_COUNT; ++i)
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	8a 83       	std	Y+2, r24	; 0x02
     b7e:	3e c0       	rjmp	.+124    	; 0xbfc <ExtractOperands+0xc6>
        {
            if (expr[i] == '+' || expr[i] == '-' || expr[i] == '*' || expr[i] == '/')
     b80:	8a 81       	ldd	r24, Y+2	; 0x02
     b82:	28 2f       	mov	r18, r24
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	88 85       	ldd	r24, Y+8	; 0x08
     b88:	99 85       	ldd	r25, Y+9	; 0x09
     b8a:	fc 01       	movw	r30, r24
     b8c:	e2 0f       	add	r30, r18
     b8e:	f3 1f       	adc	r31, r19
     b90:	80 81       	ld	r24, Z
     b92:	8b 32       	cpi	r24, 0x2B	; 43
     b94:	09 f1       	breq	.+66     	; 0xbd8 <ExtractOperands+0xa2>
     b96:	8a 81       	ldd	r24, Y+2	; 0x02
     b98:	28 2f       	mov	r18, r24
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	88 85       	ldd	r24, Y+8	; 0x08
     b9e:	99 85       	ldd	r25, Y+9	; 0x09
     ba0:	fc 01       	movw	r30, r24
     ba2:	e2 0f       	add	r30, r18
     ba4:	f3 1f       	adc	r31, r19
     ba6:	80 81       	ld	r24, Z
     ba8:	8d 32       	cpi	r24, 0x2D	; 45
     baa:	b1 f0       	breq	.+44     	; 0xbd8 <ExtractOperands+0xa2>
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	28 2f       	mov	r18, r24
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	88 85       	ldd	r24, Y+8	; 0x08
     bb4:	99 85       	ldd	r25, Y+9	; 0x09
     bb6:	fc 01       	movw	r30, r24
     bb8:	e2 0f       	add	r30, r18
     bba:	f3 1f       	adc	r31, r19
     bbc:	80 81       	ld	r24, Z
     bbe:	8a 32       	cpi	r24, 0x2A	; 42
     bc0:	59 f0       	breq	.+22     	; 0xbd8 <ExtractOperands+0xa2>
     bc2:	8a 81       	ldd	r24, Y+2	; 0x02
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	88 85       	ldd	r24, Y+8	; 0x08
     bca:	99 85       	ldd	r25, Y+9	; 0x09
     bcc:	fc 01       	movw	r30, r24
     bce:	e2 0f       	add	r30, r18
     bd0:	f3 1f       	adc	r31, r19
     bd2:	80 81       	ld	r24, Z
     bd4:	8f 32       	cpi	r24, 0x2F	; 47
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <ExtractOperands+0xc0>
            {
                operatorIndex = i;
     bd8:	8a 81       	ldd	r24, Y+2	; 0x02
     bda:	8b 83       	std	Y+3, r24	; 0x03
                *operator = expr[i];
     bdc:	8a 81       	ldd	r24, Y+2	; 0x02
     bde:	28 2f       	mov	r18, r24
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	88 85       	ldd	r24, Y+8	; 0x08
     be4:	99 85       	ldd	r25, Y+9	; 0x09
     be6:	fc 01       	movw	r30, r24
     be8:	e2 0f       	add	r30, r18
     bea:	f3 1f       	adc	r31, r19
     bec:	80 81       	ld	r24, Z
     bee:	ee 85       	ldd	r30, Y+14	; 0x0e
     bf0:	ff 85       	ldd	r31, Y+15	; 0x0f
     bf2:	80 83       	st	Z, r24
     bf4:	4c c0       	rjmp	.+152    	; 0xc8e <ExtractOperands+0x158>

	// Find the operator index in the expression
    u8 operatorIndex = -1;
    if(expr[0]== '-')
    {
        for (u8 i = 1; i < MAX_DIGIT_COUNT; ++i)
     bf6:	8a 81       	ldd	r24, Y+2	; 0x02
     bf8:	8f 5f       	subi	r24, 0xFF	; 255
     bfa:	8a 83       	std	Y+2, r24	; 0x02
     bfc:	8a 81       	ldd	r24, Y+2	; 0x02
     bfe:	80 31       	cpi	r24, 0x10	; 16
     c00:	08 f4       	brcc	.+2      	; 0xc04 <ExtractOperands+0xce>
     c02:	be cf       	rjmp	.-132    	; 0xb80 <ExtractOperands+0x4a>
     c04:	44 c0       	rjmp	.+136    	; 0xc8e <ExtractOperands+0x158>
        }

    }
    else
    {
        for (u8 i = 0; i < MAX_DIGIT_COUNT; ++i)
     c06:	19 82       	std	Y+1, r1	; 0x01
     c08:	3e c0       	rjmp	.+124    	; 0xc86 <ExtractOperands+0x150>
        {
            if (expr[i] == '+' || expr[i] == '-' || expr[i] == '*' || expr[i] == '/')
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	88 85       	ldd	r24, Y+8	; 0x08
     c12:	99 85       	ldd	r25, Y+9	; 0x09
     c14:	fc 01       	movw	r30, r24
     c16:	e2 0f       	add	r30, r18
     c18:	f3 1f       	adc	r31, r19
     c1a:	80 81       	ld	r24, Z
     c1c:	8b 32       	cpi	r24, 0x2B	; 43
     c1e:	09 f1       	breq	.+66     	; 0xc62 <ExtractOperands+0x12c>
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	88 85       	ldd	r24, Y+8	; 0x08
     c28:	99 85       	ldd	r25, Y+9	; 0x09
     c2a:	fc 01       	movw	r30, r24
     c2c:	e2 0f       	add	r30, r18
     c2e:	f3 1f       	adc	r31, r19
     c30:	80 81       	ld	r24, Z
     c32:	8d 32       	cpi	r24, 0x2D	; 45
     c34:	b1 f0       	breq	.+44     	; 0xc62 <ExtractOperands+0x12c>
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	28 2f       	mov	r18, r24
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	88 85       	ldd	r24, Y+8	; 0x08
     c3e:	99 85       	ldd	r25, Y+9	; 0x09
     c40:	fc 01       	movw	r30, r24
     c42:	e2 0f       	add	r30, r18
     c44:	f3 1f       	adc	r31, r19
     c46:	80 81       	ld	r24, Z
     c48:	8a 32       	cpi	r24, 0x2A	; 42
     c4a:	59 f0       	breq	.+22     	; 0xc62 <ExtractOperands+0x12c>
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	88 85       	ldd	r24, Y+8	; 0x08
     c54:	99 85       	ldd	r25, Y+9	; 0x09
     c56:	fc 01       	movw	r30, r24
     c58:	e2 0f       	add	r30, r18
     c5a:	f3 1f       	adc	r31, r19
     c5c:	80 81       	ld	r24, Z
     c5e:	8f 32       	cpi	r24, 0x2F	; 47
     c60:	79 f4       	brne	.+30     	; 0xc80 <ExtractOperands+0x14a>
            {
                operatorIndex = i;
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	8b 83       	std	Y+3, r24	; 0x03
                *operator = expr[i];
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	88 85       	ldd	r24, Y+8	; 0x08
     c6e:	99 85       	ldd	r25, Y+9	; 0x09
     c70:	fc 01       	movw	r30, r24
     c72:	e2 0f       	add	r30, r18
     c74:	f3 1f       	adc	r31, r19
     c76:	80 81       	ld	r24, Z
     c78:	ee 85       	ldd	r30, Y+14	; 0x0e
     c7a:	ff 85       	ldd	r31, Y+15	; 0x0f
     c7c:	80 83       	st	Z, r24
     c7e:	07 c0       	rjmp	.+14     	; 0xc8e <ExtractOperands+0x158>
        }

    }
    else
    {
        for (u8 i = 0; i < MAX_DIGIT_COUNT; ++i)
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	8f 5f       	subi	r24, 0xFF	; 255
     c84:	89 83       	std	Y+1, r24	; 0x01
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	80 31       	cpi	r24, 0x10	; 16
     c8a:	08 f4       	brcc	.+2      	; 0xc8e <ExtractOperands+0x158>
     c8c:	be cf       	rjmp	.-132    	; 0xc0a <ExtractOperands+0xd4>
    	LCD_enuDisplayChar('E');
    	return ERROR;
    }

    // Extract the operands as strings
    char operand1Str[operatorIndex + 1];
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	88 2f       	mov	r24, r24
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	01 96       	adiw	r24, 0x01	; 1
     c96:	2d b7       	in	r18, 0x3d	; 61
     c98:	3e b7       	in	r19, 0x3e	; 62
     c9a:	28 1b       	sub	r18, r24
     c9c:	39 0b       	sbc	r19, r25
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	3e bf       	out	0x3e, r19	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	2d bf       	out	0x3d, r18	; 61
     ca8:	8d b7       	in	r24, 0x3d	; 61
     caa:	9e b7       	in	r25, 0x3e	; 62
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	9d 8b       	std	Y+21, r25	; 0x15
     cb0:	8c 8b       	std	Y+20, r24	; 0x14
     cb2:	8c 89       	ldd	r24, Y+20	; 0x14
     cb4:	9d 89       	ldd	r25, Y+21	; 0x15
     cb6:	00 96       	adiw	r24, 0x00	; 0
     cb8:	9d 8b       	std	Y+21, r25	; 0x15
     cba:	8c 8b       	std	Y+20, r24	; 0x14
     cbc:	2c 89       	ldd	r18, Y+20	; 0x14
     cbe:	3d 89       	ldd	r19, Y+21	; 0x15
     cc0:	3f 83       	std	Y+7, r19	; 0x07
     cc2:	2e 83       	std	Y+6, r18	; 0x06
    char operand2Str[MAX_DIGIT_COUNT - operatorIndex - 1];
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	8f e0       	ldi	r24, 0x0F	; 15
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	82 1b       	sub	r24, r18
     cd0:	93 0b       	sbc	r25, r19
     cd2:	2d b7       	in	r18, 0x3d	; 61
     cd4:	3e b7       	in	r19, 0x3e	; 62
     cd6:	28 1b       	sub	r18, r24
     cd8:	39 0b       	sbc	r19, r25
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	3e bf       	out	0x3e, r19	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	2d bf       	out	0x3d, r18	; 61
     ce4:	8d b7       	in	r24, 0x3d	; 61
     ce6:	9e b7       	in	r25, 0x3e	; 62
     ce8:	01 96       	adiw	r24, 0x01	; 1
     cea:	9b 8b       	std	Y+19, r25	; 0x13
     cec:	8a 8b       	std	Y+18, r24	; 0x12
     cee:	8a 89       	ldd	r24, Y+18	; 0x12
     cf0:	9b 89       	ldd	r25, Y+19	; 0x13
     cf2:	00 96       	adiw	r24, 0x00	; 0
     cf4:	9b 8b       	std	Y+19, r25	; 0x13
     cf6:	8a 8b       	std	Y+18, r24	; 0x12
     cf8:	2a 89       	ldd	r18, Y+18	; 0x12
     cfa:	3b 89       	ldd	r19, Y+19	; 0x13
     cfc:	3d 83       	std	Y+5, r19	; 0x05
     cfe:	2c 83       	std	Y+4, r18	; 0x04
    strncpy(operand1Str, expr, operatorIndex);
     d00:	4e 81       	ldd	r20, Y+6	; 0x06
     d02:	5f 81       	ldd	r21, Y+7	; 0x07
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	e8 2f       	mov	r30, r24
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	28 85       	ldd	r18, Y+8	; 0x08
     d0c:	39 85       	ldd	r19, Y+9	; 0x09
     d0e:	ca 01       	movw	r24, r20
     d10:	b9 01       	movw	r22, r18
     d12:	af 01       	movw	r20, r30
     d14:	0e 94 ab 12 	call	0x2556	; 0x2556 <strncpy>
    operand1Str[operatorIndex] = '\0';
     d18:	8b 81       	ldd	r24, Y+3	; 0x03
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	8e 81       	ldd	r24, Y+6	; 0x06
     d20:	9f 81       	ldd	r25, Y+7	; 0x07
     d22:	fc 01       	movw	r30, r24
     d24:	e2 0f       	add	r30, r18
     d26:	f3 1f       	adc	r31, r19
     d28:	10 82       	st	Z, r1
    strcpy(operand2Str, &expr[operatorIndex + 1]);
     d2a:	4c 81       	ldd	r20, Y+4	; 0x04
     d2c:	5d 81       	ldd	r21, Y+5	; 0x05
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	88 2f       	mov	r24, r24
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	9c 01       	movw	r18, r24
     d36:	2f 5f       	subi	r18, 0xFF	; 255
     d38:	3f 4f       	sbci	r19, 0xFF	; 255
     d3a:	88 85       	ldd	r24, Y+8	; 0x08
     d3c:	99 85       	ldd	r25, Y+9	; 0x09
     d3e:	28 0f       	add	r18, r24
     d40:	39 1f       	adc	r19, r25
     d42:	ca 01       	movw	r24, r20
     d44:	b9 01       	movw	r22, r18
     d46:	0e 94 9b 12 	call	0x2536	; 0x2536 <strcpy>

    // Convert operands to integers
    *operand1 = atoi(operand1Str);
     d4a:	8e 81       	ldd	r24, Y+6	; 0x06
     d4c:	9f 81       	ldd	r25, Y+7	; 0x07
     d4e:	0e 94 7d 12 	call	0x24fa	; 0x24fa <atoi>
     d52:	aa 27       	eor	r26, r26
     d54:	97 fd       	sbrc	r25, 7
     d56:	a0 95       	com	r26
     d58:	ba 2f       	mov	r27, r26
     d5a:	ea 85       	ldd	r30, Y+10	; 0x0a
     d5c:	fb 85       	ldd	r31, Y+11	; 0x0b
     d5e:	80 83       	st	Z, r24
     d60:	91 83       	std	Z+1, r25	; 0x01
     d62:	a2 83       	std	Z+2, r26	; 0x02
     d64:	b3 83       	std	Z+3, r27	; 0x03
    *operand2 = atoi(operand2Str);
     d66:	8c 81       	ldd	r24, Y+4	; 0x04
     d68:	9d 81       	ldd	r25, Y+5	; 0x05
     d6a:	0e 94 7d 12 	call	0x24fa	; 0x24fa <atoi>
     d6e:	aa 27       	eor	r26, r26
     d70:	97 fd       	sbrc	r25, 7
     d72:	a0 95       	com	r26
     d74:	ba 2f       	mov	r27, r26
     d76:	ec 85       	ldd	r30, Y+12	; 0x0c
     d78:	fd 85       	ldd	r31, Y+13	; 0x0d
     d7a:	80 83       	st	Z, r24
     d7c:	91 83       	std	Z+1, r25	; 0x01
     d7e:	a2 83       	std	Z+2, r26	; 0x02
     d80:	b3 83       	std	Z+3, r27	; 0x03

    return OK;
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	a0 e0       	ldi	r26, 0x00	; 0
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	28 89       	ldd	r18, Y+16	; 0x10
     d8c:	39 89       	ldd	r19, Y+17	; 0x11
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	3e bf       	out	0x3e, r19	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	2d bf       	out	0x3d, r18	; 61
}
     d98:	bc 01       	movw	r22, r24
     d9a:	cd 01       	movw	r24, r26
     d9c:	2e 89       	ldd	r18, Y+22	; 0x16
     d9e:	3f 89       	ldd	r19, Y+23	; 0x17
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	3e bf       	out	0x3e, r19	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	2d bf       	out	0x3d, r18	; 61
     daa:	67 96       	adiw	r28, 0x17	; 23
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"

ES_t DIO_enuInit(void)
{
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	0f 92       	push	r0
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
     dc6:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
     dc8:	ea e3       	ldi	r30, 0x3A	; 58
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	8f ef       	ldi	r24, 0xFF	; 255
     dce:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
     dd0:	e7 e3       	ldi	r30, 0x37	; 55
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	8f ef       	ldi	r24, 0xFF	; 255
     dd6:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
     dd8:	e4 e3       	ldi	r30, 0x34	; 52
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	86 e9       	ldi	r24, 0x96	; 150
     dde:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
     de0:	e1 e3       	ldi	r30, 0x31	; 49
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	86 e9       	ldi	r24, 0x96	; 150
     de6:	80 83       	st	Z, r24

	PORTA =CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
     de8:	eb e3       	ldi	r30, 0x3B	; 59
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	10 82       	st	Z, r1

	Local_enuErrorstate = ES_OK;
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
     df2:	89 81       	ldd	r24, Y+1	; 0x01
}
     df4:	0f 90       	pop	r0
     df6:	cf 91       	pop	r28
     df8:	df 91       	pop	r29
     dfa:	08 95       	ret

00000dfc <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	00 d0       	rcall	.+0      	; 0xe02 <DIO_enuSetPortDirection+0x6>
     e02:	00 d0       	rcall	.+0      	; 0xe04 <DIO_enuSetPortDirection+0x8>
     e04:	0f 92       	push	r0
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	8a 83       	std	Y+2, r24	; 0x02
     e0c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
     e0e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	84 30       	cpi	r24, 0x04	; 4
     e14:	a8 f5       	brcc	.+106    	; 0xe80 <DIO_enuSetPortDirection+0x84>
	{
		switch (Copy_u8PortID)
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	3d 83       	std	Y+5, r19	; 0x05
     e1e:	2c 83       	std	Y+4, r18	; 0x04
     e20:	8c 81       	ldd	r24, Y+4	; 0x04
     e22:	9d 81       	ldd	r25, Y+5	; 0x05
     e24:	81 30       	cpi	r24, 0x01	; 1
     e26:	91 05       	cpc	r25, r1
     e28:	d1 f0       	breq	.+52     	; 0xe5e <DIO_enuSetPortDirection+0x62>
     e2a:	2c 81       	ldd	r18, Y+4	; 0x04
     e2c:	3d 81       	ldd	r19, Y+5	; 0x05
     e2e:	22 30       	cpi	r18, 0x02	; 2
     e30:	31 05       	cpc	r19, r1
     e32:	2c f4       	brge	.+10     	; 0xe3e <DIO_enuSetPortDirection+0x42>
     e34:	8c 81       	ldd	r24, Y+4	; 0x04
     e36:	9d 81       	ldd	r25, Y+5	; 0x05
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	61 f0       	breq	.+24     	; 0xe54 <DIO_enuSetPortDirection+0x58>
     e3c:	1e c0       	rjmp	.+60     	; 0xe7a <DIO_enuSetPortDirection+0x7e>
     e3e:	2c 81       	ldd	r18, Y+4	; 0x04
     e40:	3d 81       	ldd	r19, Y+5	; 0x05
     e42:	22 30       	cpi	r18, 0x02	; 2
     e44:	31 05       	cpc	r19, r1
     e46:	81 f0       	breq	.+32     	; 0xe68 <DIO_enuSetPortDirection+0x6c>
     e48:	8c 81       	ldd	r24, Y+4	; 0x04
     e4a:	9d 81       	ldd	r25, Y+5	; 0x05
     e4c:	83 30       	cpi	r24, 0x03	; 3
     e4e:	91 05       	cpc	r25, r1
     e50:	81 f0       	breq	.+32     	; 0xe72 <DIO_enuSetPortDirection+0x76>
     e52:	13 c0       	rjmp	.+38     	; 0xe7a <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
     e54:	ea e3       	ldi	r30, 0x3A	; 58
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	80 83       	st	Z, r24
     e5c:	0e c0       	rjmp	.+28     	; 0xe7a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
     e5e:	e7 e3       	ldi	r30, 0x37	; 55
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	80 83       	st	Z, r24
     e66:	09 c0       	rjmp	.+18     	; 0xe7a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
     e68:	e4 e3       	ldi	r30, 0x34	; 52
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	80 83       	st	Z, r24
     e70:	04 c0       	rjmp	.+8      	; 0xe7a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
     e72:	e1 e3       	ldi	r30, 0x31	; 49
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	89 83       	std	Y+1, r24	; 0x01
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
     e80:	83 e0       	ldi	r24, 0x03	; 3
     e82:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     e84:	89 81       	ldd	r24, Y+1	; 0x01
}
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <DIO_enuSetPortValue+0x6>
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <DIO_enuSetPortValue+0x8>
     e9e:	0f 92       	push	r0
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	8a 83       	std	Y+2, r24	; 0x02
     ea6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
     ea8:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	84 30       	cpi	r24, 0x04	; 4
     eae:	a8 f5       	brcc	.+106    	; 0xf1a <DIO_enuSetPortValue+0x84>
	{
		switch (Copy_u8PortID)
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	3d 83       	std	Y+5, r19	; 0x05
     eb8:	2c 83       	std	Y+4, r18	; 0x04
     eba:	8c 81       	ldd	r24, Y+4	; 0x04
     ebc:	9d 81       	ldd	r25, Y+5	; 0x05
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	91 05       	cpc	r25, r1
     ec2:	d1 f0       	breq	.+52     	; 0xef8 <DIO_enuSetPortValue+0x62>
     ec4:	2c 81       	ldd	r18, Y+4	; 0x04
     ec6:	3d 81       	ldd	r19, Y+5	; 0x05
     ec8:	22 30       	cpi	r18, 0x02	; 2
     eca:	31 05       	cpc	r19, r1
     ecc:	2c f4       	brge	.+10     	; 0xed8 <DIO_enuSetPortValue+0x42>
     ece:	8c 81       	ldd	r24, Y+4	; 0x04
     ed0:	9d 81       	ldd	r25, Y+5	; 0x05
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	61 f0       	breq	.+24     	; 0xeee <DIO_enuSetPortValue+0x58>
     ed6:	1e c0       	rjmp	.+60     	; 0xf14 <DIO_enuSetPortValue+0x7e>
     ed8:	2c 81       	ldd	r18, Y+4	; 0x04
     eda:	3d 81       	ldd	r19, Y+5	; 0x05
     edc:	22 30       	cpi	r18, 0x02	; 2
     ede:	31 05       	cpc	r19, r1
     ee0:	81 f0       	breq	.+32     	; 0xf02 <DIO_enuSetPortValue+0x6c>
     ee2:	8c 81       	ldd	r24, Y+4	; 0x04
     ee4:	9d 81       	ldd	r25, Y+5	; 0x05
     ee6:	83 30       	cpi	r24, 0x03	; 3
     ee8:	91 05       	cpc	r25, r1
     eea:	81 f0       	breq	.+32     	; 0xf0c <DIO_enuSetPortValue+0x76>
     eec:	13 c0       	rjmp	.+38     	; 0xf14 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
     eee:	eb e3       	ldi	r30, 0x3B	; 59
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	80 83       	st	Z, r24
     ef6:	0e c0       	rjmp	.+28     	; 0xf14 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
     ef8:	e8 e3       	ldi	r30, 0x38	; 56
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	80 83       	st	Z, r24
     f00:	09 c0       	rjmp	.+18     	; 0xf14 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
     f02:	e5 e3       	ldi	r30, 0x35	; 53
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	80 83       	st	Z, r24
     f0a:	04 c0       	rjmp	.+8      	; 0xf14 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
     f0c:	e2 e3       	ldi	r30, 0x32	; 50
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	89 83       	std	Y+1, r24	; 0x01
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
     f1a:	83 e0       	ldi	r24, 0x03	; 3
     f1c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	00 d0       	rcall	.+0      	; 0xf36 <DIO_enuTogPortValue+0x6>
     f36:	00 d0       	rcall	.+0      	; 0xf38 <DIO_enuTogPortValue+0x8>
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
     f3e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	84 30       	cpi	r24, 0x04	; 4
     f44:	08 f0       	brcs	.+2      	; 0xf48 <DIO_enuTogPortValue+0x18>
     f46:	41 c0       	rjmp	.+130    	; 0xfca <DIO_enuTogPortValue+0x9a>
	{
		switch (Copy_u8PortID)
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	3c 83       	std	Y+4, r19	; 0x04
     f50:	2b 83       	std	Y+3, r18	; 0x03
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	9c 81       	ldd	r25, Y+4	; 0x04
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	91 05       	cpc	r25, r1
     f5a:	e9 f0       	breq	.+58     	; 0xf96 <DIO_enuTogPortValue+0x66>
     f5c:	2b 81       	ldd	r18, Y+3	; 0x03
     f5e:	3c 81       	ldd	r19, Y+4	; 0x04
     f60:	22 30       	cpi	r18, 0x02	; 2
     f62:	31 05       	cpc	r19, r1
     f64:	2c f4       	brge	.+10     	; 0xf70 <DIO_enuTogPortValue+0x40>
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	9c 81       	ldd	r25, Y+4	; 0x04
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	61 f0       	breq	.+24     	; 0xf86 <DIO_enuTogPortValue+0x56>
     f6e:	2a c0       	rjmp	.+84     	; 0xfc4 <DIO_enuTogPortValue+0x94>
     f70:	2b 81       	ldd	r18, Y+3	; 0x03
     f72:	3c 81       	ldd	r19, Y+4	; 0x04
     f74:	22 30       	cpi	r18, 0x02	; 2
     f76:	31 05       	cpc	r19, r1
     f78:	b1 f0       	breq	.+44     	; 0xfa6 <DIO_enuTogPortValue+0x76>
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	9c 81       	ldd	r25, Y+4	; 0x04
     f7e:	83 30       	cpi	r24, 0x03	; 3
     f80:	91 05       	cpc	r25, r1
     f82:	c9 f0       	breq	.+50     	; 0xfb6 <DIO_enuTogPortValue+0x86>
     f84:	1f c0       	rjmp	.+62     	; 0xfc4 <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
     f86:	ab e3       	ldi	r26, 0x3B	; 59
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	eb e3       	ldi	r30, 0x3B	; 59
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	80 95       	com	r24
     f92:	8c 93       	st	X, r24
     f94:	17 c0       	rjmp	.+46     	; 0xfc4 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
     f96:	a8 e3       	ldi	r26, 0x38	; 56
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e8 e3       	ldi	r30, 0x38	; 56
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	80 95       	com	r24
     fa2:	8c 93       	st	X, r24
     fa4:	0f c0       	rjmp	.+30     	; 0xfc4 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
     fa6:	a5 e3       	ldi	r26, 0x35	; 53
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e5 e3       	ldi	r30, 0x35	; 53
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	80 95       	com	r24
     fb2:	8c 93       	st	X, r24
     fb4:	07 c0       	rjmp	.+14     	; 0xfc4 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
     fb6:	a2 e3       	ldi	r26, 0x32	; 50
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e2 e3       	ldi	r30, 0x32	; 50
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	80 95       	com	r24
     fc2:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
     fca:	83 e0       	ldi	r24, 0x03	; 3
     fcc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     fce:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_pu8Value)
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <DIO_enuGetPortValue+0x6>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <DIO_enuGetPortValue+0x8>
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <DIO_enuGetPortValue+0xa>
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	8a 83       	std	Y+2, r24	; 0x02
     fee:	7c 83       	std	Y+4, r23	; 0x04
     ff0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
     ff2:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	9c 81       	ldd	r25, Y+4	; 0x04
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	09 f4       	brne	.+2      	; 0xffe <DIO_enuGetPortValue+0x20>
     ffc:	43 c0       	rjmp	.+134    	; 0x1084 <DIO_enuGetPortValue+0xa6>
	{
		if (Copy_u8PortID <= DIO_PORTD)
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	84 30       	cpi	r24, 0x04	; 4
    1002:	e8 f5       	brcc	.+122    	; 0x107e <DIO_enuGetPortValue+0xa0>
		{
			switch (Copy_u8PortID)
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	3e 83       	std	Y+6, r19	; 0x06
    100c:	2d 83       	std	Y+5, r18	; 0x05
    100e:	8d 81       	ldd	r24, Y+5	; 0x05
    1010:	9e 81       	ldd	r25, Y+6	; 0x06
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	91 05       	cpc	r25, r1
    1016:	e1 f0       	breq	.+56     	; 0x1050 <DIO_enuGetPortValue+0x72>
    1018:	2d 81       	ldd	r18, Y+5	; 0x05
    101a:	3e 81       	ldd	r19, Y+6	; 0x06
    101c:	22 30       	cpi	r18, 0x02	; 2
    101e:	31 05       	cpc	r19, r1
    1020:	2c f4       	brge	.+10     	; 0x102c <DIO_enuGetPortValue+0x4e>
    1022:	8d 81       	ldd	r24, Y+5	; 0x05
    1024:	9e 81       	ldd	r25, Y+6	; 0x06
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	61 f0       	breq	.+24     	; 0x1042 <DIO_enuGetPortValue+0x64>
    102a:	26 c0       	rjmp	.+76     	; 0x1078 <DIO_enuGetPortValue+0x9a>
    102c:	2d 81       	ldd	r18, Y+5	; 0x05
    102e:	3e 81       	ldd	r19, Y+6	; 0x06
    1030:	22 30       	cpi	r18, 0x02	; 2
    1032:	31 05       	cpc	r19, r1
    1034:	a1 f0       	breq	.+40     	; 0x105e <DIO_enuGetPortValue+0x80>
    1036:	8d 81       	ldd	r24, Y+5	; 0x05
    1038:	9e 81       	ldd	r25, Y+6	; 0x06
    103a:	83 30       	cpi	r24, 0x03	; 3
    103c:	91 05       	cpc	r25, r1
    103e:	b1 f0       	breq	.+44     	; 0x106c <DIO_enuGetPortValue+0x8e>
    1040:	1b c0       	rjmp	.+54     	; 0x1078 <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
    1042:	e9 e3       	ldi	r30, 0x39	; 57
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	eb 81       	ldd	r30, Y+3	; 0x03
    104a:	fc 81       	ldd	r31, Y+4	; 0x04
    104c:	80 83       	st	Z, r24
    104e:	14 c0       	rjmp	.+40     	; 0x1078 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
    1050:	e6 e3       	ldi	r30, 0x36	; 54
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	eb 81       	ldd	r30, Y+3	; 0x03
    1058:	fc 81       	ldd	r31, Y+4	; 0x04
    105a:	80 83       	st	Z, r24
    105c:	0d c0       	rjmp	.+26     	; 0x1078 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
    105e:	e3 e3       	ldi	r30, 0x33	; 51
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	eb 81       	ldd	r30, Y+3	; 0x03
    1066:	fc 81       	ldd	r31, Y+4	; 0x04
    1068:	80 83       	st	Z, r24
    106a:	06 c0       	rjmp	.+12     	; 0x1078 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
    106c:	e0 e3       	ldi	r30, 0x30	; 48
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	eb 81       	ldd	r30, Y+3	; 0x03
    1074:	fc 81       	ldd	r31, Y+4	; 0x04
    1076:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	05 c0       	rjmp	.+10     	; 0x1088 <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    107e:	83 e0       	ldi	r24, 0x03	; 3
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1088:	89 81       	ldd	r24, Y+1	; 0x01
}
    108a:	26 96       	adiw	r28, 0x06	; 6
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 Copy_u8Value)
{
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <DIO_enuSetPinDirection+0x6>
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <DIO_enuSetPinDirection+0x8>
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <DIO_enuSetPinDirection+0xa>
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	8a 83       	std	Y+2, r24	; 0x02
    10ac:	6b 83       	std	Y+3, r22	; 0x03
    10ae:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    10b0:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	84 30       	cpi	r24, 0x04	; 4
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <DIO_enuSetPinDirection+0x1e>
    10b8:	d1 c0       	rjmp	.+418    	; 0x125c <DIO_enuSetPinDirection+0x1c0>
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	88 30       	cpi	r24, 0x08	; 8
    10be:	08 f0       	brcs	.+2      	; 0x10c2 <DIO_enuSetPinDirection+0x26>
    10c0:	cd c0       	rjmp	.+410    	; 0x125c <DIO_enuSetPinDirection+0x1c0>
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	82 30       	cpi	r24, 0x02	; 2
    10c6:	08 f0       	brcs	.+2      	; 0x10ca <DIO_enuSetPinDirection+0x2e>
    10c8:	c9 c0       	rjmp	.+402    	; 0x125c <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	3e 83       	std	Y+6, r19	; 0x06
    10d2:	2d 83       	std	Y+5, r18	; 0x05
    10d4:	6d 81       	ldd	r22, Y+5	; 0x05
    10d6:	7e 81       	ldd	r23, Y+6	; 0x06
    10d8:	61 30       	cpi	r22, 0x01	; 1
    10da:	71 05       	cpc	r23, r1
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <DIO_enuSetPinDirection+0x44>
    10de:	41 c0       	rjmp	.+130    	; 0x1162 <DIO_enuSetPinDirection+0xc6>
    10e0:	8d 81       	ldd	r24, Y+5	; 0x05
    10e2:	9e 81       	ldd	r25, Y+6	; 0x06
    10e4:	82 30       	cpi	r24, 0x02	; 2
    10e6:	91 05       	cpc	r25, r1
    10e8:	34 f4       	brge	.+12     	; 0x10f6 <DIO_enuSetPinDirection+0x5a>
    10ea:	2d 81       	ldd	r18, Y+5	; 0x05
    10ec:	3e 81       	ldd	r19, Y+6	; 0x06
    10ee:	21 15       	cp	r18, r1
    10f0:	31 05       	cpc	r19, r1
    10f2:	71 f0       	breq	.+28     	; 0x1110 <DIO_enuSetPinDirection+0x74>
    10f4:	b0 c0       	rjmp	.+352    	; 0x1256 <DIO_enuSetPinDirection+0x1ba>
    10f6:	6d 81       	ldd	r22, Y+5	; 0x05
    10f8:	7e 81       	ldd	r23, Y+6	; 0x06
    10fa:	62 30       	cpi	r22, 0x02	; 2
    10fc:	71 05       	cpc	r23, r1
    10fe:	09 f4       	brne	.+2      	; 0x1102 <DIO_enuSetPinDirection+0x66>
    1100:	59 c0       	rjmp	.+178    	; 0x11b4 <DIO_enuSetPinDirection+0x118>
    1102:	8d 81       	ldd	r24, Y+5	; 0x05
    1104:	9e 81       	ldd	r25, Y+6	; 0x06
    1106:	83 30       	cpi	r24, 0x03	; 3
    1108:	91 05       	cpc	r25, r1
    110a:	09 f4       	brne	.+2      	; 0x110e <DIO_enuSetPinDirection+0x72>
    110c:	7c c0       	rjmp	.+248    	; 0x1206 <DIO_enuSetPinDirection+0x16a>
    110e:	a3 c0       	rjmp	.+326    	; 0x1256 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1110:	aa e3       	ldi	r26, 0x3A	; 58
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	ea e3       	ldi	r30, 0x3A	; 58
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_enuSetPinDirection+0x90>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	2a 95       	dec	r18
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_enuSetPinDirection+0x8c>
    1130:	80 95       	com	r24
    1132:	84 23       	and	r24, r20
    1134:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
    1136:	aa e3       	ldi	r26, 0x3A	; 58
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	ea e3       	ldi	r30, 0x3A	; 58
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8c 81       	ldd	r24, Y+4	; 0x04
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	b9 01       	movw	r22, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_enuSetPinDirection+0xba>
    1152:	66 0f       	add	r22, r22
    1154:	77 1f       	adc	r23, r23
    1156:	8a 95       	dec	r24
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_enuSetPinDirection+0xb6>
    115a:	cb 01       	movw	r24, r22
    115c:	84 2b       	or	r24, r20
    115e:	8c 93       	st	X, r24
    1160:	7a c0       	rjmp	.+244    	; 0x1256 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1162:	a7 e3       	ldi	r26, 0x37	; 55
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e7 e3       	ldi	r30, 0x37	; 55
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_enuSetPinDirection+0xe2>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	2a 95       	dec	r18
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_enuSetPinDirection+0xde>
    1182:	80 95       	com	r24
    1184:	84 23       	and	r24, r20
    1186:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
    1188:	a7 e3       	ldi	r26, 0x37	; 55
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e7 e3       	ldi	r30, 0x37	; 55
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8c 81       	ldd	r24, Y+4	; 0x04
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	88 2f       	mov	r24, r24
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	b9 01       	movw	r22, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <DIO_enuSetPinDirection+0x10c>
    11a4:	66 0f       	add	r22, r22
    11a6:	77 1f       	adc	r23, r23
    11a8:	8a 95       	dec	r24
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <DIO_enuSetPinDirection+0x108>
    11ac:	cb 01       	movw	r24, r22
    11ae:	84 2b       	or	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	51 c0       	rjmp	.+162    	; 0x1256 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    11b4:	a4 e3       	ldi	r26, 0x34	; 52
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e4 e3       	ldi	r30, 0x34	; 52
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	48 2f       	mov	r20, r24
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <DIO_enuSetPinDirection+0x134>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	2a 95       	dec	r18
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <DIO_enuSetPinDirection+0x130>
    11d4:	80 95       	com	r24
    11d6:	84 23       	and	r24, r20
    11d8:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
    11da:	a4 e3       	ldi	r26, 0x34	; 52
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e4 e3       	ldi	r30, 0x34	; 52
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8c 81       	ldd	r24, Y+4	; 0x04
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	88 2f       	mov	r24, r24
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	b9 01       	movw	r22, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <DIO_enuSetPinDirection+0x15e>
    11f6:	66 0f       	add	r22, r22
    11f8:	77 1f       	adc	r23, r23
    11fa:	8a 95       	dec	r24
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <DIO_enuSetPinDirection+0x15a>
    11fe:	cb 01       	movw	r24, r22
    1200:	84 2b       	or	r24, r20
    1202:	8c 93       	st	X, r24
    1204:	28 c0       	rjmp	.+80     	; 0x1256 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1206:	a1 e3       	ldi	r26, 0x31	; 49
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e1 e3       	ldi	r30, 0x31	; 49
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_enuSetPinDirection+0x186>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	2a 95       	dec	r18
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_enuSetPinDirection+0x182>
    1226:	80 95       	com	r24
    1228:	84 23       	and	r24, r20
    122a:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
    122c:	a1 e3       	ldi	r26, 0x31	; 49
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e1 e3       	ldi	r30, 0x31	; 49
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	88 2f       	mov	r24, r24
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	b9 01       	movw	r22, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <DIO_enuSetPinDirection+0x1b0>
    1248:	66 0f       	add	r22, r22
    124a:	77 1f       	adc	r23, r23
    124c:	8a 95       	dec	r24
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <DIO_enuSetPinDirection+0x1ac>
    1250:	cb 01       	movw	r24, r22
    1252:	84 2b       	or	r24, r20
    1254:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	89 83       	std	Y+1, r24	; 0x01
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    125c:	83 e0       	ldi	r24, 0x03	; 3
    125e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1260:	89 81       	ldd	r24, Y+1	; 0x01
}
    1262:	26 96       	adiw	r28, 0x06	; 6
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	08 95       	ret

00001274 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    1274:	df 93       	push	r29
    1276:	cf 93       	push	r28
    1278:	00 d0       	rcall	.+0      	; 0x127a <DIO_enuSetPinValue+0x6>
    127a:	00 d0       	rcall	.+0      	; 0x127c <DIO_enuSetPinValue+0x8>
    127c:	00 d0       	rcall	.+0      	; 0x127e <DIO_enuSetPinValue+0xa>
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	8a 83       	std	Y+2, r24	; 0x02
    1284:	6b 83       	std	Y+3, r22	; 0x03
    1286:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1288:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	84 30       	cpi	r24, 0x04	; 4
    128e:	08 f0       	brcs	.+2      	; 0x1292 <DIO_enuSetPinValue+0x1e>
    1290:	d1 c0       	rjmp	.+418    	; 0x1434 <DIO_enuSetPinValue+0x1c0>
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	88 30       	cpi	r24, 0x08	; 8
    1296:	08 f0       	brcs	.+2      	; 0x129a <DIO_enuSetPinValue+0x26>
    1298:	cd c0       	rjmp	.+410    	; 0x1434 <DIO_enuSetPinValue+0x1c0>
    129a:	8c 81       	ldd	r24, Y+4	; 0x04
    129c:	82 30       	cpi	r24, 0x02	; 2
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <DIO_enuSetPinValue+0x2e>
    12a0:	c9 c0       	rjmp	.+402    	; 0x1434 <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	3e 83       	std	Y+6, r19	; 0x06
    12aa:	2d 83       	std	Y+5, r18	; 0x05
    12ac:	6d 81       	ldd	r22, Y+5	; 0x05
    12ae:	7e 81       	ldd	r23, Y+6	; 0x06
    12b0:	61 30       	cpi	r22, 0x01	; 1
    12b2:	71 05       	cpc	r23, r1
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <DIO_enuSetPinValue+0x44>
    12b6:	41 c0       	rjmp	.+130    	; 0x133a <DIO_enuSetPinValue+0xc6>
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	9e 81       	ldd	r25, Y+6	; 0x06
    12bc:	82 30       	cpi	r24, 0x02	; 2
    12be:	91 05       	cpc	r25, r1
    12c0:	34 f4       	brge	.+12     	; 0x12ce <DIO_enuSetPinValue+0x5a>
    12c2:	2d 81       	ldd	r18, Y+5	; 0x05
    12c4:	3e 81       	ldd	r19, Y+6	; 0x06
    12c6:	21 15       	cp	r18, r1
    12c8:	31 05       	cpc	r19, r1
    12ca:	71 f0       	breq	.+28     	; 0x12e8 <DIO_enuSetPinValue+0x74>
    12cc:	b0 c0       	rjmp	.+352    	; 0x142e <DIO_enuSetPinValue+0x1ba>
    12ce:	6d 81       	ldd	r22, Y+5	; 0x05
    12d0:	7e 81       	ldd	r23, Y+6	; 0x06
    12d2:	62 30       	cpi	r22, 0x02	; 2
    12d4:	71 05       	cpc	r23, r1
    12d6:	09 f4       	brne	.+2      	; 0x12da <DIO_enuSetPinValue+0x66>
    12d8:	59 c0       	rjmp	.+178    	; 0x138c <DIO_enuSetPinValue+0x118>
    12da:	8d 81       	ldd	r24, Y+5	; 0x05
    12dc:	9e 81       	ldd	r25, Y+6	; 0x06
    12de:	83 30       	cpi	r24, 0x03	; 3
    12e0:	91 05       	cpc	r25, r1
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <DIO_enuSetPinValue+0x72>
    12e4:	7c c0       	rjmp	.+248    	; 0x13de <DIO_enuSetPinValue+0x16a>
    12e6:	a3 c0       	rjmp	.+326    	; 0x142e <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    12e8:	ab e3       	ldi	r26, 0x3B	; 59
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	eb e3       	ldi	r30, 0x3B	; 59
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <DIO_enuSetPinValue+0x90>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	2a 95       	dec	r18
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <DIO_enuSetPinValue+0x8c>
    1308:	80 95       	com	r24
    130a:	84 23       	and	r24, r20
    130c:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    130e:	ab e3       	ldi	r26, 0x3B	; 59
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	eb e3       	ldi	r30, 0x3B	; 59
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	b9 01       	movw	r22, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_enuSetPinValue+0xba>
    132a:	66 0f       	add	r22, r22
    132c:	77 1f       	adc	r23, r23
    132e:	8a 95       	dec	r24
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_enuSetPinValue+0xb6>
    1332:	cb 01       	movw	r24, r22
    1334:	84 2b       	or	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	7a c0       	rjmp	.+244    	; 0x142e <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    133a:	a8 e3       	ldi	r26, 0x38	; 56
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e8 e3       	ldi	r30, 0x38	; 56
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_enuSetPinValue+0xe2>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	2a 95       	dec	r18
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <DIO_enuSetPinValue+0xde>
    135a:	80 95       	com	r24
    135c:	84 23       	and	r24, r20
    135e:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    1360:	a8 e3       	ldi	r26, 0x38	; 56
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e8 e3       	ldi	r30, 0x38	; 56
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	8c 81       	ldd	r24, Y+4	; 0x04
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	88 2f       	mov	r24, r24
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	b9 01       	movw	r22, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <DIO_enuSetPinValue+0x10c>
    137c:	66 0f       	add	r22, r22
    137e:	77 1f       	adc	r23, r23
    1380:	8a 95       	dec	r24
    1382:	e2 f7       	brpl	.-8      	; 0x137c <DIO_enuSetPinValue+0x108>
    1384:	cb 01       	movw	r24, r22
    1386:	84 2b       	or	r24, r20
    1388:	8c 93       	st	X, r24
    138a:	51 c0       	rjmp	.+162    	; 0x142e <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    138c:	a5 e3       	ldi	r26, 0x35	; 53
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e5 e3       	ldi	r30, 0x35	; 53
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	48 2f       	mov	r20, r24
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <DIO_enuSetPinValue+0x134>
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	2a 95       	dec	r18
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <DIO_enuSetPinValue+0x130>
    13ac:	80 95       	com	r24
    13ae:	84 23       	and	r24, r20
    13b0:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    13b2:	a5 e3       	ldi	r26, 0x35	; 53
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e5 e3       	ldi	r30, 0x35	; 53
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	48 2f       	mov	r20, r24
    13be:	8c 81       	ldd	r24, Y+4	; 0x04
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	88 2f       	mov	r24, r24
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	b9 01       	movw	r22, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <DIO_enuSetPinValue+0x15e>
    13ce:	66 0f       	add	r22, r22
    13d0:	77 1f       	adc	r23, r23
    13d2:	8a 95       	dec	r24
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <DIO_enuSetPinValue+0x15a>
    13d6:	cb 01       	movw	r24, r22
    13d8:	84 2b       	or	r24, r20
    13da:	8c 93       	st	X, r24
    13dc:	28 c0       	rjmp	.+80     	; 0x142e <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    13de:	a2 e3       	ldi	r26, 0x32	; 50
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e2 e3       	ldi	r30, 0x32	; 50
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	48 2f       	mov	r20, r24
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <DIO_enuSetPinValue+0x186>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	2a 95       	dec	r18
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <DIO_enuSetPinValue+0x182>
    13fe:	80 95       	com	r24
    1400:	84 23       	and	r24, r20
    1402:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    1404:	a2 e3       	ldi	r26, 0x32	; 50
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e2 e3       	ldi	r30, 0x32	; 50
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	48 2f       	mov	r20, r24
    1410:	8c 81       	ldd	r24, Y+4	; 0x04
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	88 2f       	mov	r24, r24
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	b9 01       	movw	r22, r18
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <DIO_enuSetPinValue+0x1b0>
    1420:	66 0f       	add	r22, r22
    1422:	77 1f       	adc	r23, r23
    1424:	8a 95       	dec	r24
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <DIO_enuSetPinValue+0x1ac>
    1428:	cb 01       	movw	r24, r22
    142a:	84 2b       	or	r24, r20
    142c:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1434:	83 e0       	ldi	r24, 0x03	; 3
    1436:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1438:	89 81       	ldd	r24, Y+1	; 0x01
}
    143a:	26 96       	adiw	r28, 0x06	; 6
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID, u8 Copy_u8PinID )
{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	00 d0       	rcall	.+0      	; 0x1452 <DIO_enuTogPin+0x6>
    1452:	00 d0       	rcall	.+0      	; 0x1454 <DIO_enuTogPin+0x8>
    1454:	0f 92       	push	r0
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	8a 83       	std	Y+2, r24	; 0x02
    145c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    145e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	84 30       	cpi	r24, 0x04	; 4
    1464:	08 f0       	brcs	.+2      	; 0x1468 <DIO_enuTogPin+0x1c>
    1466:	75 c0       	rjmp	.+234    	; 0x1552 <DIO_enuTogPin+0x106>
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	88 30       	cpi	r24, 0x08	; 8
    146c:	08 f0       	brcs	.+2      	; 0x1470 <DIO_enuTogPin+0x24>
    146e:	71 c0       	rjmp	.+226    	; 0x1552 <DIO_enuTogPin+0x106>
			Copy_u8PinID <= DIO_PIN7)
	{
		switch (Copy_u8PortID)
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	3d 83       	std	Y+5, r19	; 0x05
    1478:	2c 83       	std	Y+4, r18	; 0x04
    147a:	8c 81       	ldd	r24, Y+4	; 0x04
    147c:	9d 81       	ldd	r25, Y+5	; 0x05
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	91 05       	cpc	r25, r1
    1482:	49 f1       	breq	.+82     	; 0x14d6 <DIO_enuTogPin+0x8a>
    1484:	2c 81       	ldd	r18, Y+4	; 0x04
    1486:	3d 81       	ldd	r19, Y+5	; 0x05
    1488:	22 30       	cpi	r18, 0x02	; 2
    148a:	31 05       	cpc	r19, r1
    148c:	2c f4       	brge	.+10     	; 0x1498 <DIO_enuTogPin+0x4c>
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	9d 81       	ldd	r25, Y+5	; 0x05
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	61 f0       	breq	.+24     	; 0x14ae <DIO_enuTogPin+0x62>
    1496:	5a c0       	rjmp	.+180    	; 0x154c <DIO_enuTogPin+0x100>
    1498:	2c 81       	ldd	r18, Y+4	; 0x04
    149a:	3d 81       	ldd	r19, Y+5	; 0x05
    149c:	22 30       	cpi	r18, 0x02	; 2
    149e:	31 05       	cpc	r19, r1
    14a0:	71 f1       	breq	.+92     	; 0x14fe <DIO_enuTogPin+0xb2>
    14a2:	8c 81       	ldd	r24, Y+4	; 0x04
    14a4:	9d 81       	ldd	r25, Y+5	; 0x05
    14a6:	83 30       	cpi	r24, 0x03	; 3
    14a8:	91 05       	cpc	r25, r1
    14aa:	e9 f1       	breq	.+122    	; 0x1526 <DIO_enuTogPin+0xda>
    14ac:	4f c0       	rjmp	.+158    	; 0x154c <DIO_enuTogPin+0x100>
		{
		case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    14ae:	ab e3       	ldi	r26, 0x3B	; 59
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	eb e3       	ldi	r30, 0x3B	; 59
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <DIO_enuTogPin+0x80>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <DIO_enuTogPin+0x7c>
    14d0:	84 27       	eor	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	3b c0       	rjmp	.+118    	; 0x154c <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    14d6:	a8 e3       	ldi	r26, 0x38	; 56
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e8 e3       	ldi	r30, 0x38	; 56
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <DIO_enuTogPin+0xa8>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <DIO_enuTogPin+0xa4>
    14f8:	84 27       	eor	r24, r20
    14fa:	8c 93       	st	X, r24
    14fc:	27 c0       	rjmp	.+78     	; 0x154c <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    14fe:	a5 e3       	ldi	r26, 0x35	; 53
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e5 e3       	ldi	r30, 0x35	; 53
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	48 2f       	mov	r20, r24
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 2e       	mov	r0, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <DIO_enuTogPin+0xd0>
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	0a 94       	dec	r0
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <DIO_enuTogPin+0xcc>
    1520:	84 27       	eor	r24, r20
    1522:	8c 93       	st	X, r24
    1524:	13 c0       	rjmp	.+38     	; 0x154c <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1526:	a2 e3       	ldi	r26, 0x32	; 50
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e2 e3       	ldi	r30, 0x32	; 50
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	48 2f       	mov	r20, r24
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	02 2e       	mov	r0, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <DIO_enuTogPin+0xf8>
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	0a 94       	dec	r0
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <DIO_enuTogPin+0xf4>
    1548:	84 27       	eor	r24, r20
    154a:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <DIO_enuTogPin+0x10a>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1552:	83 e0       	ldi	r24, 0x03	; 3
    1554:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1556:	89 81       	ldd	r24, Y+1	; 0x01
}
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	27 97       	sbiw	r28, 0x07	; 7
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	8a 83       	std	Y+2, r24	; 0x02
    157e:	6b 83       	std	Y+3, r22	; 0x03
    1580:	5d 83       	std	Y+5, r21	; 0x05
    1582:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1584:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	9d 81       	ldd	r25, Y+5	; 0x05
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	09 f4       	brne	.+2      	; 0x1590 <DIO_enuGetPinValue+0x28>
    158e:	7e c0       	rjmp	.+252    	; 0x168c <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8PortID <= DIO_PORTD &&
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	84 30       	cpi	r24, 0x04	; 4
    1594:	08 f0       	brcs	.+2      	; 0x1598 <DIO_enuGetPinValue+0x30>
    1596:	77 c0       	rjmp	.+238    	; 0x1686 <DIO_enuGetPinValue+0x11e>
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	88 30       	cpi	r24, 0x08	; 8
    159c:	08 f0       	brcs	.+2      	; 0x15a0 <DIO_enuGetPinValue+0x38>
    159e:	73 c0       	rjmp	.+230    	; 0x1686 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_PIN7)
		{
			switch (Copy_u8PortID)
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	3f 83       	std	Y+7, r19	; 0x07
    15a8:	2e 83       	std	Y+6, r18	; 0x06
    15aa:	4e 81       	ldd	r20, Y+6	; 0x06
    15ac:	5f 81       	ldd	r21, Y+7	; 0x07
    15ae:	41 30       	cpi	r20, 0x01	; 1
    15b0:	51 05       	cpc	r21, r1
    15b2:	59 f1       	breq	.+86     	; 0x160a <DIO_enuGetPinValue+0xa2>
    15b4:	8e 81       	ldd	r24, Y+6	; 0x06
    15b6:	9f 81       	ldd	r25, Y+7	; 0x07
    15b8:	82 30       	cpi	r24, 0x02	; 2
    15ba:	91 05       	cpc	r25, r1
    15bc:	34 f4       	brge	.+12     	; 0x15ca <DIO_enuGetPinValue+0x62>
    15be:	2e 81       	ldd	r18, Y+6	; 0x06
    15c0:	3f 81       	ldd	r19, Y+7	; 0x07
    15c2:	21 15       	cp	r18, r1
    15c4:	31 05       	cpc	r19, r1
    15c6:	69 f0       	breq	.+26     	; 0x15e2 <DIO_enuGetPinValue+0x7a>
    15c8:	5b c0       	rjmp	.+182    	; 0x1680 <DIO_enuGetPinValue+0x118>
    15ca:	4e 81       	ldd	r20, Y+6	; 0x06
    15cc:	5f 81       	ldd	r21, Y+7	; 0x07
    15ce:	42 30       	cpi	r20, 0x02	; 2
    15d0:	51 05       	cpc	r21, r1
    15d2:	79 f1       	breq	.+94     	; 0x1632 <DIO_enuGetPinValue+0xca>
    15d4:	8e 81       	ldd	r24, Y+6	; 0x06
    15d6:	9f 81       	ldd	r25, Y+7	; 0x07
    15d8:	83 30       	cpi	r24, 0x03	; 3
    15da:	91 05       	cpc	r25, r1
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <DIO_enuGetPinValue+0x78>
    15de:	3d c0       	rjmp	.+122    	; 0x165a <DIO_enuGetPinValue+0xf2>
    15e0:	4f c0       	rjmp	.+158    	; 0x1680 <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA>>Copy_u8PinID) &DIO_MASK_BIT);
    15e2:	e9 e3       	ldi	r30, 0x39	; 57
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	88 2f       	mov	r24, r24
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	a9 01       	movw	r20, r18
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <DIO_enuGetPinValue+0x92>
    15f6:	55 95       	asr	r21
    15f8:	47 95       	ror	r20
    15fa:	8a 95       	dec	r24
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <DIO_enuGetPinValue+0x8e>
    15fe:	ca 01       	movw	r24, r20
    1600:	81 70       	andi	r24, 0x01	; 1
    1602:	ec 81       	ldd	r30, Y+4	; 0x04
    1604:	fd 81       	ldd	r31, Y+5	; 0x05
    1606:	80 83       	st	Z, r24
    1608:	3b c0       	rjmp	.+118    	; 0x1680 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB>>Copy_u8PinID) &DIO_MASK_BIT);
    160a:	e6 e3       	ldi	r30, 0x36	; 54
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	88 2f       	mov	r24, r24
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	a9 01       	movw	r20, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <DIO_enuGetPinValue+0xba>
    161e:	55 95       	asr	r21
    1620:	47 95       	ror	r20
    1622:	8a 95       	dec	r24
    1624:	e2 f7       	brpl	.-8      	; 0x161e <DIO_enuGetPinValue+0xb6>
    1626:	ca 01       	movw	r24, r20
    1628:	81 70       	andi	r24, 0x01	; 1
    162a:	ec 81       	ldd	r30, Y+4	; 0x04
    162c:	fd 81       	ldd	r31, Y+5	; 0x05
    162e:	80 83       	st	Z, r24
    1630:	27 c0       	rjmp	.+78     	; 0x1680 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC>>Copy_u8PinID) &DIO_MASK_BIT);
    1632:	e3 e3       	ldi	r30, 0x33	; 51
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	88 2f       	mov	r24, r24
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	a9 01       	movw	r20, r18
    1644:	02 c0       	rjmp	.+4      	; 0x164a <DIO_enuGetPinValue+0xe2>
    1646:	55 95       	asr	r21
    1648:	47 95       	ror	r20
    164a:	8a 95       	dec	r24
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <DIO_enuGetPinValue+0xde>
    164e:	ca 01       	movw	r24, r20
    1650:	81 70       	andi	r24, 0x01	; 1
    1652:	ec 81       	ldd	r30, Y+4	; 0x04
    1654:	fd 81       	ldd	r31, Y+5	; 0x05
    1656:	80 83       	st	Z, r24
    1658:	13 c0       	rjmp	.+38     	; 0x1680 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
    165a:	e0 e3       	ldi	r30, 0x30	; 48
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	88 2f       	mov	r24, r24
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	a9 01       	movw	r20, r18
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <DIO_enuGetPinValue+0x10a>
    166e:	55 95       	asr	r21
    1670:	47 95       	ror	r20
    1672:	8a 95       	dec	r24
    1674:	e2 f7       	brpl	.-8      	; 0x166e <DIO_enuGetPinValue+0x106>
    1676:	ca 01       	movw	r24, r20
    1678:	81 70       	andi	r24, 0x01	; 1
    167a:	ec 81       	ldd	r30, Y+4	; 0x04
    167c:	fd 81       	ldd	r31, Y+5	; 0x05
    167e:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	05 c0       	rjmp	.+10     	; 0x1690 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    1686:	83 e0       	ldi	r24, 0x03	; 3
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    168c:	82 e0       	ldi	r24, 0x02	; 2
    168e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1690:	89 81       	ldd	r24, Y+1	; 0x01
}
    1692:	27 96       	adiw	r28, 0x07	; 7
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	cd bf       	out	0x3d, r28	; 61
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <KPD_enuInit>:
#include "KPD_config.h"
#include "KPD_int.h"
#include "KPD_priv.h"

ES_t KPD_enuInit(void)
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	0f 92       	push	r0
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    16ae:	19 82       	std	Y+1, r1	; 0x01

	//Setting Columns to output
	DIO_enuSetPinDirection(KPD_PORT ,KPD_COLUMN0_PIN , DIO_u8HIGH);
    16b0:	83 e0       	ldi	r24, 0x03	; 3
    16b2:	60 e0       	ldi	r22, 0x00	; 0
    16b4:	41 e0       	ldi	r20, 0x01	; 1
    16b6:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KPD_PORT ,KPD_COLUMN1_PIN , DIO_u8HIGH);
    16ba:	83 e0       	ldi	r24, 0x03	; 3
    16bc:	61 e0       	ldi	r22, 0x01	; 1
    16be:	41 e0       	ldi	r20, 0x01	; 1
    16c0:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KPD_PORT ,KPD_COLUMN2_PIN , DIO_u8HIGH);
    16c4:	83 e0       	ldi	r24, 0x03	; 3
    16c6:	62 e0       	ldi	r22, 0x02	; 2
    16c8:	41 e0       	ldi	r20, 0x01	; 1
    16ca:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KPD_PORT ,KPD_COLUMN3_PIN , DIO_u8HIGH);
    16ce:	83 e0       	ldi	r24, 0x03	; 3
    16d0:	63 e0       	ldi	r22, 0x03	; 3
    16d2:	41 e0       	ldi	r20, 0x01	; 1
    16d4:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_enuSetPinDirection>

	//Setting Rows to input
	DIO_enuSetPinDirection(KPD_PORT ,KPD_ROW0_PIN , DIO_u8LOW);
    16d8:	83 e0       	ldi	r24, 0x03	; 3
    16da:	64 e0       	ldi	r22, 0x04	; 4
    16dc:	40 e0       	ldi	r20, 0x00	; 0
    16de:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KPD_PORT ,KPD_ROW1_PIN , DIO_u8LOW);
    16e2:	83 e0       	ldi	r24, 0x03	; 3
    16e4:	65 e0       	ldi	r22, 0x05	; 5
    16e6:	40 e0       	ldi	r20, 0x00	; 0
    16e8:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KPD_PORT ,KPD_ROW2_PIN , DIO_u8LOW);
    16ec:	83 e0       	ldi	r24, 0x03	; 3
    16ee:	66 e0       	ldi	r22, 0x06	; 6
    16f0:	40 e0       	ldi	r20, 0x00	; 0
    16f2:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KPD_PORT ,KPD_ROW3_PIN , DIO_u8LOW);
    16f6:	83 e0       	ldi	r24, 0x03	; 3
    16f8:	67 e0       	ldi	r22, 0x07	; 7
    16fa:	40 e0       	ldi	r20, 0x00	; 0
    16fc:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_enuSetPinDirection>

	//Setting Columns to high & Rows to Pull_UP
	DIO_enuSetPortValue(KPD_PORT , 0b11111111);
    1700:	83 e0       	ldi	r24, 0x03	; 3
    1702:	6f ef       	ldi	r22, 0xFF	; 255
    1704:	0e 94 4b 07 	call	0xe96	; 0xe96 <DIO_enuSetPortValue>

	Local_enuErrorState = ES_OK;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    170c:	89 81       	ldd	r24, Y+1	; 0x01
}
    170e:	0f 90       	pop	r0
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <KPD_u8GetPressedKey>:


u8 KPD_u8GetPressedKey(void)
{
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	00 d0       	rcall	.+0      	; 0x171c <KPD_u8GetPressedKey+0x6>
    171c:	00 d0       	rcall	.+0      	; 0x171e <KPD_u8GetPressedKey+0x8>
    171e:	0f 92       	push	r0
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
	//pressed button & loops iterators
	u8 Local_u8PressedKey= KPD_NO_PRESSED_KEY, Local_u8ColumnIdx, Local_u8RowIdx, Local_u8PinState;
    1724:	8f ef       	ldi	r24, 0xFF	; 255
    1726:	8b 83       	std	Y+3, r24	; 0x03

	static u8 Local_u8KPDColumnArr[COLUMN_NUMBER] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};


	for(Local_u8ColumnIdx=0; Local_u8ColumnIdx < COLUMN_NUMBER; Local_u8ColumnIdx++)
    1728:	1a 82       	std	Y+2, r1	; 0x02
    172a:	5e c0       	rjmp	.+188    	; 0x17e8 <KPD_u8GetPressedKey+0xd2>
	{
		//Activate Current Column (Set its pin to low)
		DIO_enuSetPinValue(KPD_PORT, Local_u8KPDColumnArr[Local_u8ColumnIdx], DIO_u8LOW);
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	88 2f       	mov	r24, r24
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	fc 01       	movw	r30, r24
    1734:	e1 59       	subi	r30, 0x91	; 145
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	90 81       	ld	r25, Z
    173a:	83 e0       	ldi	r24, 0x03	; 3
    173c:	69 2f       	mov	r22, r25
    173e:	40 e0       	ldi	r20, 0x00	; 0
    1740:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>

		for(Local_u8RowIdx=0; Local_u8RowIdx< ROW_NUMBER; Local_u8RowIdx++)
    1744:	19 82       	std	Y+1, r1	; 0x01
    1746:	3d c0       	rjmp	.+122    	; 0x17c2 <KPD_u8GetPressedKey+0xac>
		{
			//Read current Row
			DIO_enuGetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	88 2f       	mov	r24, r24
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	fc 01       	movw	r30, r24
    1750:	e5 59       	subi	r30, 0x95	; 149
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	90 81       	ld	r25, Z
    1756:	9e 01       	movw	r18, r28
    1758:	2c 5f       	subi	r18, 0xFC	; 252
    175a:	3f 4f       	sbci	r19, 0xFF	; 255
    175c:	83 e0       	ldi	r24, 0x03	; 3
    175e:	69 2f       	mov	r22, r25
    1760:	a9 01       	movw	r20, r18
    1762:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_enuGetPinValue>
			//Check SW is pressed
			if(Local_u8PinState == DIO_u8LOW)
    1766:	8c 81       	ldd	r24, Y+4	; 0x04
    1768:	88 23       	and	r24, r24
    176a:	41 f5       	brne	.+80     	; 0x17bc <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	48 2f       	mov	r20, r24
    1770:	50 e0       	ldi	r21, 0x00	; 0
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	ca 01       	movw	r24, r20
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	82 0f       	add	r24, r18
    1784:	93 1f       	adc	r25, r19
    1786:	fc 01       	movw	r30, r24
    1788:	ed 58       	subi	r30, 0x8D	; 141
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	80 81       	ld	r24, Z
    178e:	8b 83       	std	Y+3, r24	; 0x03
    1790:	0f c0       	rjmp	.+30     	; 0x17b0 <KPD_u8GetPressedKey+0x9a>

				//Polling (Busy Waiting): Solving the problem of Still pressing the Button (the difference in performance between SW & USER
				while(Local_u8PinState == DIO_u8LOW)
				{
					DIO_enuGetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	88 2f       	mov	r24, r24
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	fc 01       	movw	r30, r24
    179a:	e5 59       	subi	r30, 0x95	; 149
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	90 81       	ld	r25, Z
    17a0:	9e 01       	movw	r18, r28
    17a2:	2c 5f       	subi	r18, 0xFC	; 252
    17a4:	3f 4f       	sbci	r19, 0xFF	; 255
    17a6:	83 e0       	ldi	r24, 0x03	; 3
    17a8:	69 2f       	mov	r22, r25
    17aa:	a9 01       	movw	r20, r18
    17ac:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_enuGetPinValue>
			if(Local_u8PinState == DIO_u8LOW)
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];

				//Polling (Busy Waiting): Solving the problem of Still pressing the Button (the difference in performance between SW & USER
				while(Local_u8PinState == DIO_u8LOW)
    17b0:	8c 81       	ldd	r24, Y+4	; 0x04
    17b2:	88 23       	and	r24, r24
    17b4:	71 f3       	breq	.-36     	; 0x1792 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_enuGetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
				}
				return Local_u8PressedKey;
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	8d 83       	std	Y+5, r24	; 0x05
    17ba:	1c c0       	rjmp	.+56     	; 0x17f4 <KPD_u8GetPressedKey+0xde>
	for(Local_u8ColumnIdx=0; Local_u8ColumnIdx < COLUMN_NUMBER; Local_u8ColumnIdx++)
	{
		//Activate Current Column (Set its pin to low)
		DIO_enuSetPinValue(KPD_PORT, Local_u8KPDColumnArr[Local_u8ColumnIdx], DIO_u8LOW);

		for(Local_u8RowIdx=0; Local_u8RowIdx< ROW_NUMBER; Local_u8RowIdx++)
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	8f 5f       	subi	r24, 0xFF	; 255
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	84 30       	cpi	r24, 0x04	; 4
    17c6:	08 f4       	brcc	.+2      	; 0x17ca <KPD_u8GetPressedKey+0xb4>
    17c8:	bf cf       	rjmp	.-130    	; 0x1748 <KPD_u8GetPressedKey+0x32>
				}
				return Local_u8PressedKey;
			}
		}
		//DeActivate Current Column (HIGH)
		DIO_enuSetPinValue(KPD_PORT, Local_u8KPDColumnArr[Local_u8ColumnIdx], DIO_u8HIGH);
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	88 2f       	mov	r24, r24
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	fc 01       	movw	r30, r24
    17d2:	e1 59       	subi	r30, 0x91	; 145
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	90 81       	ld	r25, Z
    17d8:	83 e0       	ldi	r24, 0x03	; 3
    17da:	69 2f       	mov	r22, r25
    17dc:	41 e0       	ldi	r20, 0x01	; 1
    17de:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>

	static u8 Local_u8KPDColumnArr[COLUMN_NUMBER] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};


	for(Local_u8ColumnIdx=0; Local_u8ColumnIdx < COLUMN_NUMBER; Local_u8ColumnIdx++)
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	8f 5f       	subi	r24, 0xFF	; 255
    17e6:	8a 83       	std	Y+2, r24	; 0x02
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	84 30       	cpi	r24, 0x04	; 4
    17ec:	08 f4       	brcc	.+2      	; 0x17f0 <KPD_u8GetPressedKey+0xda>
    17ee:	9e cf       	rjmp	.-196    	; 0x172c <KPD_u8GetPressedKey+0x16>
			}
		}
		//DeActivate Current Column (HIGH)
		DIO_enuSetPinValue(KPD_PORT, Local_u8KPDColumnArr[Local_u8ColumnIdx], DIO_u8HIGH);
	}
	return Local_u8PressedKey;
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	8d 83       	std	Y+5, r24	; 0x05
    17f4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <LCD_enuInit>:

#include "LCD_config.h"
#include "LCD_priv.h"

ES_t LCD_enuInit(void)
{
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	e9 97       	sbiw	r28, 0x39	; 57
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    181a:	19 ae       	std	Y+57, r1	; 0x39
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	ac e0       	ldi	r26, 0x0C	; 12
    1822:	b2 e4       	ldi	r27, 0x42	; 66
    1824:	8d ab       	std	Y+53, r24	; 0x35
    1826:	9e ab       	std	Y+54, r25	; 0x36
    1828:	af ab       	std	Y+55, r26	; 0x37
    182a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182c:	6d a9       	ldd	r22, Y+53	; 0x35
    182e:	7e a9       	ldd	r23, Y+54	; 0x36
    1830:	8f a9       	ldd	r24, Y+55	; 0x37
    1832:	98 ad       	ldd	r25, Y+56	; 0x38
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	4a e7       	ldi	r20, 0x7A	; 122
    183a:	53 e4       	ldi	r21, 0x43	; 67
    183c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	89 ab       	std	Y+49, r24	; 0x31
    1846:	9a ab       	std	Y+50, r25	; 0x32
    1848:	ab ab       	std	Y+51, r26	; 0x33
    184a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    184c:	69 a9       	ldd	r22, Y+49	; 0x31
    184e:	7a a9       	ldd	r23, Y+50	; 0x32
    1850:	8b a9       	ldd	r24, Y+51	; 0x33
    1852:	9c a9       	ldd	r25, Y+52	; 0x34
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	40 e8       	ldi	r20, 0x80	; 128
    185a:	5f e3       	ldi	r21, 0x3F	; 63
    185c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1860:	88 23       	and	r24, r24
    1862:	2c f4       	brge	.+10     	; 0x186e <LCD_enuInit+0x68>
		__ticks = 1;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	98 ab       	std	Y+48, r25	; 0x30
    186a:	8f a7       	std	Y+47, r24	; 0x2f
    186c:	3f c0       	rjmp	.+126    	; 0x18ec <LCD_enuInit+0xe6>
	else if (__tmp > 65535)
    186e:	69 a9       	ldd	r22, Y+49	; 0x31
    1870:	7a a9       	ldd	r23, Y+50	; 0x32
    1872:	8b a9       	ldd	r24, Y+51	; 0x33
    1874:	9c a9       	ldd	r25, Y+52	; 0x34
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	3f ef       	ldi	r19, 0xFF	; 255
    187a:	4f e7       	ldi	r20, 0x7F	; 127
    187c:	57 e4       	ldi	r21, 0x47	; 71
    187e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1882:	18 16       	cp	r1, r24
    1884:	4c f5       	brge	.+82     	; 0x18d8 <LCD_enuInit+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1886:	6d a9       	ldd	r22, Y+53	; 0x35
    1888:	7e a9       	ldd	r23, Y+54	; 0x36
    188a:	8f a9       	ldd	r24, Y+55	; 0x37
    188c:	98 ad       	ldd	r25, Y+56	; 0x38
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e2       	ldi	r20, 0x20	; 32
    1894:	51 e4       	ldi	r21, 0x41	; 65
    1896:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	bc 01       	movw	r22, r24
    18a0:	cd 01       	movw	r24, r26
    18a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	98 ab       	std	Y+48, r25	; 0x30
    18ac:	8f a7       	std	Y+47, r24	; 0x2f
    18ae:	0f c0       	rjmp	.+30     	; 0x18ce <LCD_enuInit+0xc8>
    18b0:	89 e1       	ldi	r24, 0x19	; 25
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	9e a7       	std	Y+46, r25	; 0x2e
    18b6:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    18ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	f1 f7       	brne	.-4      	; 0x18bc <LCD_enuInit+0xb6>
    18c0:	9e a7       	std	Y+46, r25	; 0x2e
    18c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18c6:	98 a9       	ldd	r25, Y+48	; 0x30
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	98 ab       	std	Y+48, r25	; 0x30
    18cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    18d0:	98 a9       	ldd	r25, Y+48	; 0x30
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	69 f7       	brne	.-38     	; 0x18b0 <LCD_enuInit+0xaa>
    18d6:	14 c0       	rjmp	.+40     	; 0x1900 <LCD_enuInit+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d8:	69 a9       	ldd	r22, Y+49	; 0x31
    18da:	7a a9       	ldd	r23, Y+50	; 0x32
    18dc:	8b a9       	ldd	r24, Y+51	; 0x33
    18de:	9c a9       	ldd	r25, Y+52	; 0x34
    18e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	98 ab       	std	Y+48, r25	; 0x30
    18ea:	8f a7       	std	Y+47, r24	; 0x2f
    18ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ee:	98 a9       	ldd	r25, Y+48	; 0x30
    18f0:	9c a7       	std	Y+44, r25	; 0x2c
    18f2:	8b a7       	std	Y+43, r24	; 0x2b
    18f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    18f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	f1 f7       	brne	.-4      	; 0x18f8 <LCD_enuInit+0xf2>
    18fc:	9c a7       	std	Y+44, r25	; 0x2c
    18fe:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);
	//Control Pins
	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	41 e0       	ldi	r20, 0x01	; 1
    1906:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	61 e0       	ldi	r22, 0x01	; 1
    190e:	41 e0       	ldi	r20, 0x01	; 1
    1910:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	62 e0       	ldi	r22, 0x02	; 2
    1918:	41 e0       	ldi	r20, 0x01	; 1
    191a:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_enuSetPinDirection>
	//Data 7:4
	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    191e:	82 e0       	ldi	r24, 0x02	; 2
    1920:	67 e0       	ldi	r22, 0x07	; 7
    1922:	41 e0       	ldi	r20, 0x01	; 1
    1924:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    1928:	82 e0       	ldi	r24, 0x02	; 2
    192a:	66 e0       	ldi	r22, 0x06	; 6
    192c:	41 e0       	ldi	r20, 0x01	; 1
    192e:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    1932:	82 e0       	ldi	r24, 0x02	; 2
    1934:	65 e0       	ldi	r22, 0x05	; 5
    1936:	41 e0       	ldi	r20, 0x01	; 1
    1938:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    193c:	82 e0       	ldi	r24, 0x02	; 2
    193e:	64 e0       	ldi	r22, 0x04	; 4
    1940:	41 e0       	ldi	r20, 0x01	; 1
    1942:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_enuSetPinDirection>
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a0 e8       	ldi	r26, 0x80	; 128
    194c:	bf e3       	ldi	r27, 0x3F	; 63
    194e:	8f a3       	std	Y+39, r24	; 0x27
    1950:	98 a7       	std	Y+40, r25	; 0x28
    1952:	a9 a7       	std	Y+41, r26	; 0x29
    1954:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1956:	6f a1       	ldd	r22, Y+39	; 0x27
    1958:	78 a5       	ldd	r23, Y+40	; 0x28
    195a:	89 a5       	ldd	r24, Y+41	; 0x29
    195c:	9a a5       	ldd	r25, Y+42	; 0x2a
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	4a e7       	ldi	r20, 0x7A	; 122
    1964:	53 e4       	ldi	r21, 0x43	; 67
    1966:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	8b a3       	std	Y+35, r24	; 0x23
    1970:	9c a3       	std	Y+36, r25	; 0x24
    1972:	ad a3       	std	Y+37, r26	; 0x25
    1974:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1976:	6b a1       	ldd	r22, Y+35	; 0x23
    1978:	7c a1       	ldd	r23, Y+36	; 0x24
    197a:	8d a1       	ldd	r24, Y+37	; 0x25
    197c:	9e a1       	ldd	r25, Y+38	; 0x26
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e8       	ldi	r20, 0x80	; 128
    1984:	5f e3       	ldi	r21, 0x3F	; 63
    1986:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    198a:	88 23       	and	r24, r24
    198c:	2c f4       	brge	.+10     	; 0x1998 <LCD_enuInit+0x192>
		__ticks = 1;
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	9a a3       	std	Y+34, r25	; 0x22
    1994:	89 a3       	std	Y+33, r24	; 0x21
    1996:	3f c0       	rjmp	.+126    	; 0x1a16 <LCD_enuInit+0x210>
	else if (__tmp > 65535)
    1998:	6b a1       	ldd	r22, Y+35	; 0x23
    199a:	7c a1       	ldd	r23, Y+36	; 0x24
    199c:	8d a1       	ldd	r24, Y+37	; 0x25
    199e:	9e a1       	ldd	r25, Y+38	; 0x26
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	3f ef       	ldi	r19, 0xFF	; 255
    19a4:	4f e7       	ldi	r20, 0x7F	; 127
    19a6:	57 e4       	ldi	r21, 0x47	; 71
    19a8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19ac:	18 16       	cp	r1, r24
    19ae:	4c f5       	brge	.+82     	; 0x1a02 <LCD_enuInit+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b0:	6f a1       	ldd	r22, Y+39	; 0x27
    19b2:	78 a5       	ldd	r23, Y+40	; 0x28
    19b4:	89 a5       	ldd	r24, Y+41	; 0x29
    19b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e2       	ldi	r20, 0x20	; 32
    19be:	51 e4       	ldi	r21, 0x41	; 65
    19c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	bc 01       	movw	r22, r24
    19ca:	cd 01       	movw	r24, r26
    19cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	9a a3       	std	Y+34, r25	; 0x22
    19d6:	89 a3       	std	Y+33, r24	; 0x21
    19d8:	0f c0       	rjmp	.+30     	; 0x19f8 <LCD_enuInit+0x1f2>
    19da:	89 e1       	ldi	r24, 0x19	; 25
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	98 a3       	std	Y+32, r25	; 0x20
    19e0:	8f 8f       	std	Y+31, r24	; 0x1f
    19e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19e4:	98 a1       	ldd	r25, Y+32	; 0x20
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	f1 f7       	brne	.-4      	; 0x19e6 <LCD_enuInit+0x1e0>
    19ea:	98 a3       	std	Y+32, r25	; 0x20
    19ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ee:	89 a1       	ldd	r24, Y+33	; 0x21
    19f0:	9a a1       	ldd	r25, Y+34	; 0x22
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	9a a3       	std	Y+34, r25	; 0x22
    19f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f8:	89 a1       	ldd	r24, Y+33	; 0x21
    19fa:	9a a1       	ldd	r25, Y+34	; 0x22
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	69 f7       	brne	.-38     	; 0x19da <LCD_enuInit+0x1d4>
    1a00:	14 c0       	rjmp	.+40     	; 0x1a2a <LCD_enuInit+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a02:	6b a1       	ldd	r22, Y+35	; 0x23
    1a04:	7c a1       	ldd	r23, Y+36	; 0x24
    1a06:	8d a1       	ldd	r24, Y+37	; 0x25
    1a08:	9e a1       	ldd	r25, Y+38	; 0x26
    1a0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	9a a3       	std	Y+34, r25	; 0x22
    1a14:	89 a3       	std	Y+33, r24	; 0x21
    1a16:	89 a1       	ldd	r24, Y+33	; 0x21
    1a18:	9a a1       	ldd	r25, Y+34	; 0x22
    1a1a:	9e 8f       	std	Y+30, r25	; 0x1e
    1a1c:	8d 8f       	std	Y+29, r24	; 0x1d
    1a1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a20:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <LCD_enuInit+0x21c>
    1a26:	9e 8f       	std	Y+30, r25	; 0x1e
    1a28:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_invidSendCommand(0x38);
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommand(0x28);
#endif
	_delay_ms(1);
	LCD_invidSendCommand(0x0f); //display
    1a2a:	8f e0       	ldi	r24, 0x0F	; 15
    1a2c:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <LCD_invidSendCommand>
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	a0 e8       	ldi	r26, 0x80	; 128
    1a36:	bf e3       	ldi	r27, 0x3F	; 63
    1a38:	89 8f       	std	Y+25, r24	; 0x19
    1a3a:	9a 8f       	std	Y+26, r25	; 0x1a
    1a3c:	ab 8f       	std	Y+27, r26	; 0x1b
    1a3e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a40:	69 8d       	ldd	r22, Y+25	; 0x19
    1a42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	4a e7       	ldi	r20, 0x7A	; 122
    1a4e:	53 e4       	ldi	r21, 0x43	; 67
    1a50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	8d 8b       	std	Y+21, r24	; 0x15
    1a5a:	9e 8b       	std	Y+22, r25	; 0x16
    1a5c:	af 8b       	std	Y+23, r26	; 0x17
    1a5e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a60:	6d 89       	ldd	r22, Y+21	; 0x15
    1a62:	7e 89       	ldd	r23, Y+22	; 0x16
    1a64:	8f 89       	ldd	r24, Y+23	; 0x17
    1a66:	98 8d       	ldd	r25, Y+24	; 0x18
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e8       	ldi	r20, 0x80	; 128
    1a6e:	5f e3       	ldi	r21, 0x3F	; 63
    1a70:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a74:	88 23       	and	r24, r24
    1a76:	2c f4       	brge	.+10     	; 0x1a82 <LCD_enuInit+0x27c>
		__ticks = 1;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	9c 8b       	std	Y+20, r25	; 0x14
    1a7e:	8b 8b       	std	Y+19, r24	; 0x13
    1a80:	3f c0       	rjmp	.+126    	; 0x1b00 <LCD_enuInit+0x2fa>
	else if (__tmp > 65535)
    1a82:	6d 89       	ldd	r22, Y+21	; 0x15
    1a84:	7e 89       	ldd	r23, Y+22	; 0x16
    1a86:	8f 89       	ldd	r24, Y+23	; 0x17
    1a88:	98 8d       	ldd	r25, Y+24	; 0x18
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	3f ef       	ldi	r19, 0xFF	; 255
    1a8e:	4f e7       	ldi	r20, 0x7F	; 127
    1a90:	57 e4       	ldi	r21, 0x47	; 71
    1a92:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a96:	18 16       	cp	r1, r24
    1a98:	4c f5       	brge	.+82     	; 0x1aec <LCD_enuInit+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aa0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e2       	ldi	r20, 0x20	; 32
    1aa8:	51 e4       	ldi	r21, 0x41	; 65
    1aaa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	bc 01       	movw	r22, r24
    1ab4:	cd 01       	movw	r24, r26
    1ab6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	9c 8b       	std	Y+20, r25	; 0x14
    1ac0:	8b 8b       	std	Y+19, r24	; 0x13
    1ac2:	0f c0       	rjmp	.+30     	; 0x1ae2 <LCD_enuInit+0x2dc>
    1ac4:	89 e1       	ldi	r24, 0x19	; 25
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	9a 8b       	std	Y+18, r25	; 0x12
    1aca:	89 8b       	std	Y+17, r24	; 0x11
    1acc:	89 89       	ldd	r24, Y+17	; 0x11
    1ace:	9a 89       	ldd	r25, Y+18	; 0x12
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	f1 f7       	brne	.-4      	; 0x1ad0 <LCD_enuInit+0x2ca>
    1ad4:	9a 8b       	std	Y+18, r25	; 0x12
    1ad6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad8:	8b 89       	ldd	r24, Y+19	; 0x13
    1ada:	9c 89       	ldd	r25, Y+20	; 0x14
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	9c 8b       	std	Y+20, r25	; 0x14
    1ae0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae6:	00 97       	sbiw	r24, 0x00	; 0
    1ae8:	69 f7       	brne	.-38     	; 0x1ac4 <LCD_enuInit+0x2be>
    1aea:	14 c0       	rjmp	.+40     	; 0x1b14 <LCD_enuInit+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aec:	6d 89       	ldd	r22, Y+21	; 0x15
    1aee:	7e 89       	ldd	r23, Y+22	; 0x16
    1af0:	8f 89       	ldd	r24, Y+23	; 0x17
    1af2:	98 8d       	ldd	r25, Y+24	; 0x18
    1af4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	9c 8b       	std	Y+20, r25	; 0x14
    1afe:	8b 8b       	std	Y+19, r24	; 0x13
    1b00:	8b 89       	ldd	r24, Y+19	; 0x13
    1b02:	9c 89       	ldd	r25, Y+20	; 0x14
    1b04:	98 8b       	std	Y+16, r25	; 0x10
    1b06:	8f 87       	std	Y+15, r24	; 0x0f
    1b08:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b0a:	98 89       	ldd	r25, Y+16	; 0x10
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <LCD_enuInit+0x306>
    1b10:	98 8b       	std	Y+16, r25	; 0x10
    1b12:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommand(0x01); //Clear
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <LCD_invidSendCommand>
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	a0 e0       	ldi	r26, 0x00	; 0
    1b20:	b0 e4       	ldi	r27, 0x40	; 64
    1b22:	8b 87       	std	Y+11, r24	; 0x0b
    1b24:	9c 87       	std	Y+12, r25	; 0x0c
    1b26:	ad 87       	std	Y+13, r26	; 0x0d
    1b28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	4a e7       	ldi	r20, 0x7A	; 122
    1b38:	53 e4       	ldi	r21, 0x43	; 67
    1b3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	8f 83       	std	Y+7, r24	; 0x07
    1b44:	98 87       	std	Y+8, r25	; 0x08
    1b46:	a9 87       	std	Y+9, r26	; 0x09
    1b48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4c:	78 85       	ldd	r23, Y+8	; 0x08
    1b4e:	89 85       	ldd	r24, Y+9	; 0x09
    1b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e8       	ldi	r20, 0x80	; 128
    1b58:	5f e3       	ldi	r21, 0x3F	; 63
    1b5a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b5e:	88 23       	and	r24, r24
    1b60:	2c f4       	brge	.+10     	; 0x1b6c <LCD_enuInit+0x366>
		__ticks = 1;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	9e 83       	std	Y+6, r25	; 0x06
    1b68:	8d 83       	std	Y+5, r24	; 0x05
    1b6a:	3f c0       	rjmp	.+126    	; 0x1bea <LCD_enuInit+0x3e4>
	else if (__tmp > 65535)
    1b6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6e:	78 85       	ldd	r23, Y+8	; 0x08
    1b70:	89 85       	ldd	r24, Y+9	; 0x09
    1b72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	3f ef       	ldi	r19, 0xFF	; 255
    1b78:	4f e7       	ldi	r20, 0x7F	; 127
    1b7a:	57 e4       	ldi	r21, 0x47	; 71
    1b7c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b80:	18 16       	cp	r1, r24
    1b82:	4c f5       	brge	.+82     	; 0x1bd6 <LCD_enuInit+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	40 e2       	ldi	r20, 0x20	; 32
    1b92:	51 e4       	ldi	r21, 0x41	; 65
    1b94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	bc 01       	movw	r22, r24
    1b9e:	cd 01       	movw	r24, r26
    1ba0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	9e 83       	std	Y+6, r25	; 0x06
    1baa:	8d 83       	std	Y+5, r24	; 0x05
    1bac:	0f c0       	rjmp	.+30     	; 0x1bcc <LCD_enuInit+0x3c6>
    1bae:	89 e1       	ldi	r24, 0x19	; 25
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	9c 83       	std	Y+4, r25	; 0x04
    1bb4:	8b 83       	std	Y+3, r24	; 0x03
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	f1 f7       	brne	.-4      	; 0x1bba <LCD_enuInit+0x3b4>
    1bbe:	9c 83       	std	Y+4, r25	; 0x04
    1bc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	9e 83       	std	Y+6, r25	; 0x06
    1bca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bce:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	69 f7       	brne	.-38     	; 0x1bae <LCD_enuInit+0x3a8>
    1bd4:	14 c0       	rjmp	.+40     	; 0x1bfe <LCD_enuInit+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd8:	78 85       	ldd	r23, Y+8	; 0x08
    1bda:	89 85       	ldd	r24, Y+9	; 0x09
    1bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	9e 83       	std	Y+6, r25	; 0x06
    1be8:	8d 83       	std	Y+5, r24	; 0x05
    1bea:	8d 81       	ldd	r24, Y+5	; 0x05
    1bec:	9e 81       	ldd	r25, Y+6	; 0x06
    1bee:	9a 83       	std	Y+2, r25	; 0x02
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	f1 f7       	brne	.-4      	; 0x1bf6 <LCD_enuInit+0x3f0>
    1bfa:	9a 83       	std	Y+2, r25	; 0x02
    1bfc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommand(0x06); //Entry Mode
    1bfe:	86 e0       	ldi	r24, 0x06	; 6
    1c00:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <LCD_invidSendCommand>

	Local_enuErrorState = ES_OK;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	89 af       	std	Y+57, r24	; 0x39

	return Local_enuErrorState;
    1c08:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1c0a:	e9 96       	adiw	r28, 0x39	; 57
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <LCD_enuDisplayChar+0x6>
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1c28:	19 82       	std	Y+1, r1	; 0x01

	// Set Register As Data
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	41 e0       	ldi	r20, 0x01	; 1
    1c30:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>
	//Setting Data
	LCD_vidLatch(Copy_u8Data);
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_vidLatch>

	Local_enuErrorState = ES_OK;
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	cf 91       	pop	r28
    1c46:	df 91       	pop	r29
    1c48:	08 95       	ret

00001c4a <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <LCD_enuSendCommand+0x6>
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1c56:	19 82       	std	Y+1, r1	; 0x01
	// Set Register As Command
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	60 e0       	ldi	r22, 0x00	; 0
    1c5c:	40 e0       	ldi	r20, 0x00	; 0
    1c5e:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>
	//Setting Data
	LCD_vidLatch(Copy_u8Command);
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_vidLatch>

	Local_enuErrorState = ES_OK;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	08 95       	ret

00001c78 <LCD_vidLatch>:

// setting the repeated part in a separate function
static void LCD_vidLatch(u8 copy_u8Data)
{
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	2f 97       	sbiw	r28, 0x0f	; 15
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
    1c8c:	8f 87       	std	Y+15, r24	; 0x0f
	// Set RW As Write
		DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	61 e0       	ldi	r22, 0x01	; 1
    1c92:	40 e0       	ldi	r20, 0x00	; 0
    1c94:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>

		//Set Enable to low
		DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	62 e0       	ldi	r22, 0x02	; 2
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>

		//Write Data
		DIO_enuSetPinValue(D7_PORT, D7_PIN, ((copy_u8Data>>7)&1));
    1ca2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca4:	98 2f       	mov	r25, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	99 27       	eor	r25, r25
    1caa:	99 1f       	adc	r25, r25
    1cac:	82 e0       	ldi	r24, 0x02	; 2
    1cae:	67 e0       	ldi	r22, 0x07	; 7
    1cb0:	49 2f       	mov	r20, r25
    1cb2:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT, D6_PIN, ((copy_u8Data>>6)&1));
    1cb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb8:	82 95       	swap	r24
    1cba:	86 95       	lsr	r24
    1cbc:	86 95       	lsr	r24
    1cbe:	83 70       	andi	r24, 0x03	; 3
    1cc0:	98 2f       	mov	r25, r24
    1cc2:	91 70       	andi	r25, 0x01	; 1
    1cc4:	82 e0       	ldi	r24, 0x02	; 2
    1cc6:	66 e0       	ldi	r22, 0x06	; 6
    1cc8:	49 2f       	mov	r20, r25
    1cca:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT, D5_PIN, ((copy_u8Data>>5)&1));
    1cce:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cd0:	82 95       	swap	r24
    1cd2:	86 95       	lsr	r24
    1cd4:	87 70       	andi	r24, 0x07	; 7
    1cd6:	98 2f       	mov	r25, r24
    1cd8:	91 70       	andi	r25, 0x01	; 1
    1cda:	82 e0       	ldi	r24, 0x02	; 2
    1cdc:	65 e0       	ldi	r22, 0x05	; 5
    1cde:	49 2f       	mov	r20, r25
    1ce0:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT, D4_PIN, ((copy_u8Data>>4)&1));
    1ce4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce6:	82 95       	swap	r24
    1ce8:	8f 70       	andi	r24, 0x0F	; 15
    1cea:	98 2f       	mov	r25, r24
    1cec:	91 70       	andi	r25, 0x01	; 1
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	64 e0       	ldi	r22, 0x04	; 4
    1cf2:	49 2f       	mov	r20, r25
    1cf4:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>
#if LCD_MODE == EIGHT_BIT
		DIO_enuSetPinValue(D3_PORT, D3_PIN, ((copy_u8Data>>3)&1));
    1cf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cfa:	86 95       	lsr	r24
    1cfc:	86 95       	lsr	r24
    1cfe:	86 95       	lsr	r24
    1d00:	98 2f       	mov	r25, r24
    1d02:	91 70       	andi	r25, 0x01	; 1
    1d04:	82 e0       	ldi	r24, 0x02	; 2
    1d06:	63 e0       	ldi	r22, 0x03	; 3
    1d08:	49 2f       	mov	r20, r25
    1d0a:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D2_PORT, D2_PIN, ((copy_u8Data>>2)&1));
    1d0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d10:	86 95       	lsr	r24
    1d12:	86 95       	lsr	r24
    1d14:	98 2f       	mov	r25, r24
    1d16:	91 70       	andi	r25, 0x01	; 1
    1d18:	82 e0       	ldi	r24, 0x02	; 2
    1d1a:	62 e0       	ldi	r22, 0x02	; 2
    1d1c:	49 2f       	mov	r20, r25
    1d1e:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D1_PORT, D1_PIN, ((copy_u8Data>>1)&1));
    1d22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d24:	86 95       	lsr	r24
    1d26:	98 2f       	mov	r25, r24
    1d28:	91 70       	andi	r25, 0x01	; 1
    1d2a:	82 e0       	ldi	r24, 0x02	; 2
    1d2c:	61 e0       	ldi	r22, 0x01	; 1
    1d2e:	49 2f       	mov	r20, r25
    1d30:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D0_PORT, D0_PIN, ((copy_u8Data>>0)&1));
    1d34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d36:	98 2f       	mov	r25, r24
    1d38:	91 70       	andi	r25, 0x01	; 1
    1d3a:	82 e0       	ldi	r24, 0x02	; 2
    1d3c:	60 e0       	ldi	r22, 0x00	; 0
    1d3e:	49 2f       	mov	r20, r25
    1d40:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>
#elif LCD_MODE == FOUR_BIT
#endif
		//Set Enable to High
		DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	62 e0       	ldi	r22, 0x02	; 2
    1d48:	41 e0       	ldi	r20, 0x01	; 1
    1d4a:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	a0 e2       	ldi	r26, 0x20	; 32
    1d54:	b1 e4       	ldi	r27, 0x41	; 65
    1d56:	8b 87       	std	Y+11, r24	; 0x0b
    1d58:	9c 87       	std	Y+12, r25	; 0x0c
    1d5a:	ad 87       	std	Y+13, r26	; 0x0d
    1d5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	4a e7       	ldi	r20, 0x7A	; 122
    1d6c:	53 e4       	ldi	r21, 0x43	; 67
    1d6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	8f 83       	std	Y+7, r24	; 0x07
    1d78:	98 87       	std	Y+8, r25	; 0x08
    1d7a:	a9 87       	std	Y+9, r26	; 0x09
    1d7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d80:	78 85       	ldd	r23, Y+8	; 0x08
    1d82:	89 85       	ldd	r24, Y+9	; 0x09
    1d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	40 e8       	ldi	r20, 0x80	; 128
    1d8c:	5f e3       	ldi	r21, 0x3F	; 63
    1d8e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d92:	88 23       	and	r24, r24
    1d94:	2c f4       	brge	.+10     	; 0x1da0 <LCD_vidLatch+0x128>
		__ticks = 1;
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	9e 83       	std	Y+6, r25	; 0x06
    1d9c:	8d 83       	std	Y+5, r24	; 0x05
    1d9e:	3f c0       	rjmp	.+126    	; 0x1e1e <LCD_vidLatch+0x1a6>
	else if (__tmp > 65535)
    1da0:	6f 81       	ldd	r22, Y+7	; 0x07
    1da2:	78 85       	ldd	r23, Y+8	; 0x08
    1da4:	89 85       	ldd	r24, Y+9	; 0x09
    1da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	3f ef       	ldi	r19, 0xFF	; 255
    1dac:	4f e7       	ldi	r20, 0x7F	; 127
    1dae:	57 e4       	ldi	r21, 0x47	; 71
    1db0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1db4:	18 16       	cp	r1, r24
    1db6:	4c f5       	brge	.+82     	; 0x1e0a <LCD_vidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e2       	ldi	r20, 0x20	; 32
    1dc6:	51 e4       	ldi	r21, 0x41	; 65
    1dc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	bc 01       	movw	r22, r24
    1dd2:	cd 01       	movw	r24, r26
    1dd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	9e 83       	std	Y+6, r25	; 0x06
    1dde:	8d 83       	std	Y+5, r24	; 0x05
    1de0:	0f c0       	rjmp	.+30     	; 0x1e00 <LCD_vidLatch+0x188>
    1de2:	89 e1       	ldi	r24, 0x19	; 25
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	9c 83       	std	Y+4, r25	; 0x04
    1de8:	8b 83       	std	Y+3, r24	; 0x03
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	9c 81       	ldd	r25, Y+4	; 0x04
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	f1 f7       	brne	.-4      	; 0x1dee <LCD_vidLatch+0x176>
    1df2:	9c 83       	std	Y+4, r25	; 0x04
    1df4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df6:	8d 81       	ldd	r24, Y+5	; 0x05
    1df8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	9e 83       	std	Y+6, r25	; 0x06
    1dfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e00:	8d 81       	ldd	r24, Y+5	; 0x05
    1e02:	9e 81       	ldd	r25, Y+6	; 0x06
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	69 f7       	brne	.-38     	; 0x1de2 <LCD_vidLatch+0x16a>
    1e08:	14 c0       	rjmp	.+40     	; 0x1e32 <LCD_vidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0c:	78 85       	ldd	r23, Y+8	; 0x08
    1e0e:	89 85       	ldd	r24, Y+9	; 0x09
    1e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	9e 83       	std	Y+6, r25	; 0x06
    1e1c:	8d 83       	std	Y+5, r24	; 0x05
    1e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e20:	9e 81       	ldd	r25, Y+6	; 0x06
    1e22:	9a 83       	std	Y+2, r25	; 0x02
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <LCD_vidLatch+0x1b2>
    1e2e:	9a 83       	std	Y+2, r25	; 0x02
    1e30:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		//Set Enable to low
		DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	62 e0       	ldi	r22, 0x02	; 2
    1e36:	40 e0       	ldi	r20, 0x00	; 0
    1e38:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>
}
    1e3c:	2f 96       	adiw	r28, 0x0f	; 15
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	de bf       	out	0x3e, r29	; 62
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	cd bf       	out	0x3d, r28	; 61
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <LCD_invidSendCommand>:

static inline void LCD_invidSendCommand(u8 Copy_u8Command)
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	2f 97       	sbiw	r28, 0x0f	; 15
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	8f 87       	std	Y+15, r24	; 0x0f
	// Set Register As Command
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	60 e0       	ldi	r22, 0x00	; 0
    1e68:	40 e0       	ldi	r20, 0x00	; 0
    1e6a:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>

	// Set RW As Write
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	61 e0       	ldi	r22, 0x01	; 1
    1e72:	40 e0       	ldi	r20, 0x00	; 0
    1e74:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>

	//Set Enable to low
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	62 e0       	ldi	r22, 0x02	; 2
    1e7c:	40 e0       	ldi	r20, 0x00	; 0
    1e7e:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>

	//Write Data
	DIO_enuSetPinValue(D7_PORT, D7_PIN, ((Copy_u8Command>>7)&1));
    1e82:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e84:	98 2f       	mov	r25, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	99 27       	eor	r25, r25
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	82 e0       	ldi	r24, 0x02	; 2
    1e8e:	67 e0       	ldi	r22, 0x07	; 7
    1e90:	49 2f       	mov	r20, r25
    1e92:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT, D6_PIN, ((Copy_u8Command>>6)&1));
    1e96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e98:	82 95       	swap	r24
    1e9a:	86 95       	lsr	r24
    1e9c:	86 95       	lsr	r24
    1e9e:	83 70       	andi	r24, 0x03	; 3
    1ea0:	98 2f       	mov	r25, r24
    1ea2:	91 70       	andi	r25, 0x01	; 1
    1ea4:	82 e0       	ldi	r24, 0x02	; 2
    1ea6:	66 e0       	ldi	r22, 0x06	; 6
    1ea8:	49 2f       	mov	r20, r25
    1eaa:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT, D5_PIN, ((Copy_u8Command>>5)&1));
    1eae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eb0:	82 95       	swap	r24
    1eb2:	86 95       	lsr	r24
    1eb4:	87 70       	andi	r24, 0x07	; 7
    1eb6:	98 2f       	mov	r25, r24
    1eb8:	91 70       	andi	r25, 0x01	; 1
    1eba:	82 e0       	ldi	r24, 0x02	; 2
    1ebc:	65 e0       	ldi	r22, 0x05	; 5
    1ebe:	49 2f       	mov	r20, r25
    1ec0:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT, D4_PIN, ((Copy_u8Command>>4)&1));
    1ec4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ec6:	82 95       	swap	r24
    1ec8:	8f 70       	andi	r24, 0x0F	; 15
    1eca:	98 2f       	mov	r25, r24
    1ecc:	91 70       	andi	r25, 0x01	; 1
    1ece:	82 e0       	ldi	r24, 0x02	; 2
    1ed0:	64 e0       	ldi	r22, 0x04	; 4
    1ed2:	49 2f       	mov	r20, r25
    1ed4:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D3_PORT, D3_PIN, ((Copy_u8Command>>3)&1));
    1ed8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eda:	86 95       	lsr	r24
    1edc:	86 95       	lsr	r24
    1ede:	86 95       	lsr	r24
    1ee0:	98 2f       	mov	r25, r24
    1ee2:	91 70       	andi	r25, 0x01	; 1
    1ee4:	82 e0       	ldi	r24, 0x02	; 2
    1ee6:	63 e0       	ldi	r22, 0x03	; 3
    1ee8:	49 2f       	mov	r20, r25
    1eea:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT, D2_PIN, ((Copy_u8Command>>2)&1));
    1eee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef0:	86 95       	lsr	r24
    1ef2:	86 95       	lsr	r24
    1ef4:	98 2f       	mov	r25, r24
    1ef6:	91 70       	andi	r25, 0x01	; 1
    1ef8:	82 e0       	ldi	r24, 0x02	; 2
    1efa:	62 e0       	ldi	r22, 0x02	; 2
    1efc:	49 2f       	mov	r20, r25
    1efe:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT, D1_PIN, ((Copy_u8Command>>1)&1));
    1f02:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f04:	86 95       	lsr	r24
    1f06:	98 2f       	mov	r25, r24
    1f08:	91 70       	andi	r25, 0x01	; 1
    1f0a:	82 e0       	ldi	r24, 0x02	; 2
    1f0c:	61 e0       	ldi	r22, 0x01	; 1
    1f0e:	49 2f       	mov	r20, r25
    1f10:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT, D0_PIN, ((Copy_u8Command>>0)&1));
    1f14:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f16:	98 2f       	mov	r25, r24
    1f18:	91 70       	andi	r25, 0x01	; 1
    1f1a:	82 e0       	ldi	r24, 0x02	; 2
    1f1c:	60 e0       	ldi	r22, 0x00	; 0
    1f1e:	49 2f       	mov	r20, r25
    1f20:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>

	//Set Enable to High
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	62 e0       	ldi	r22, 0x02	; 2
    1f28:	41 e0       	ldi	r20, 0x01	; 1
    1f2a:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	a0 e2       	ldi	r26, 0x20	; 32
    1f34:	b1 e4       	ldi	r27, 0x41	; 65
    1f36:	8b 87       	std	Y+11, r24	; 0x0b
    1f38:	9c 87       	std	Y+12, r25	; 0x0c
    1f3a:	ad 87       	std	Y+13, r26	; 0x0d
    1f3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	4a e7       	ldi	r20, 0x7A	; 122
    1f4c:	53 e4       	ldi	r21, 0x43	; 67
    1f4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	8f 83       	std	Y+7, r24	; 0x07
    1f58:	98 87       	std	Y+8, r25	; 0x08
    1f5a:	a9 87       	std	Y+9, r26	; 0x09
    1f5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f60:	78 85       	ldd	r23, Y+8	; 0x08
    1f62:	89 85       	ldd	r24, Y+9	; 0x09
    1f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e8       	ldi	r20, 0x80	; 128
    1f6c:	5f e3       	ldi	r21, 0x3F	; 63
    1f6e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f72:	88 23       	and	r24, r24
    1f74:	2c f4       	brge	.+10     	; 0x1f80 <LCD_invidSendCommand+0x132>
		__ticks = 1;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	9e 83       	std	Y+6, r25	; 0x06
    1f7c:	8d 83       	std	Y+5, r24	; 0x05
    1f7e:	3f c0       	rjmp	.+126    	; 0x1ffe <LCD_invidSendCommand+0x1b0>
	else if (__tmp > 65535)
    1f80:	6f 81       	ldd	r22, Y+7	; 0x07
    1f82:	78 85       	ldd	r23, Y+8	; 0x08
    1f84:	89 85       	ldd	r24, Y+9	; 0x09
    1f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	3f ef       	ldi	r19, 0xFF	; 255
    1f8c:	4f e7       	ldi	r20, 0x7F	; 127
    1f8e:	57 e4       	ldi	r21, 0x47	; 71
    1f90:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f94:	18 16       	cp	r1, r24
    1f96:	4c f5       	brge	.+82     	; 0x1fea <LCD_invidSendCommand+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e2       	ldi	r20, 0x20	; 32
    1fa6:	51 e4       	ldi	r21, 0x41	; 65
    1fa8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	9e 83       	std	Y+6, r25	; 0x06
    1fbe:	8d 83       	std	Y+5, r24	; 0x05
    1fc0:	0f c0       	rjmp	.+30     	; 0x1fe0 <LCD_invidSendCommand+0x192>
    1fc2:	89 e1       	ldi	r24, 0x19	; 25
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	9c 83       	std	Y+4, r25	; 0x04
    1fc8:	8b 83       	std	Y+3, r24	; 0x03
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <LCD_invidSendCommand+0x180>
    1fd2:	9c 83       	std	Y+4, r25	; 0x04
    1fd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	9e 83       	std	Y+6, r25	; 0x06
    1fde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	69 f7       	brne	.-38     	; 0x1fc2 <LCD_invidSendCommand+0x174>
    1fe8:	14 c0       	rjmp	.+40     	; 0x2012 <LCD_invidSendCommand+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fea:	6f 81       	ldd	r22, Y+7	; 0x07
    1fec:	78 85       	ldd	r23, Y+8	; 0x08
    1fee:	89 85       	ldd	r24, Y+9	; 0x09
    1ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	9e 83       	std	Y+6, r25	; 0x06
    1ffc:	8d 83       	std	Y+5, r24	; 0x05
    1ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    2000:	9e 81       	ldd	r25, Y+6	; 0x06
    2002:	9a 83       	std	Y+2, r25	; 0x02
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	9a 81       	ldd	r25, Y+2	; 0x02
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <LCD_invidSendCommand+0x1bc>
    200e:	9a 83       	std	Y+2, r25	; 0x02
    2010:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	//Set Enable to low
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	62 e0       	ldi	r22, 0x02	; 2
    2016:	40 e0       	ldi	r20, 0x00	; 0
    2018:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_enuSetPinValue>
}
    201c:	2f 96       	adiw	r28, 0x0f	; 15
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	08 95       	ret

0000202e <main>:
#include "Calc_priv.h"
#include "Calc_config.h"
#include "Calc_int.h"

int main()
{
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
    2036:	c8 54       	subi	r28, 0x48	; 72
    2038:	d0 40       	sbci	r29, 0x00	; 0
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	f8 94       	cli
    203e:	de bf       	out	0x3e, r29	; 62
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	cd bf       	out	0x3d, r28	; 61
	//Intialization
	DIO_enuInit();
    2044:	0e 94 de 06 	call	0xdbc	; 0xdbc <DIO_enuInit>
	LCD_enuInit();
    2048:	0e 94 03 0c 	call	0x1806	; 0x1806 <LCD_enuInit>
	KPD_enuInit();
    204c:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <KPD_enuInit>

	u8 Local_u8ArrForDigits[16];
	u8 Local_u8ArrForDigitsIDX=0;
    2050:	1d 86       	std	Y+13, r1	; 0x0d
	u8 feedback[16];
	while (1)
	{
        //Appending Previous Result into my array of digits
		for (u8 Local_u8Iter_FeedbackArr = 0; feedback[Local_u8Iter_FeedbackArr] != '\0' && Local_u8Iter_FeedbackArr < 16; Local_u8Iter_FeedbackArr++)
    2052:	1b 86       	std	Y+11, r1	; 0x0b
    2054:	18 c0       	rjmp	.+48     	; 0x2086 <main+0x58>
		{
		    Local_u8ArrForDigits[Local_u8ArrForDigitsIDX++]= feedback[Local_u8Iter_FeedbackArr];
    2056:	8d 85       	ldd	r24, Y+13	; 0x0d
    2058:	48 2f       	mov	r20, r24
    205a:	50 e0       	ldi	r21, 0x00	; 0
    205c:	8b 85       	ldd	r24, Y+11	; 0x0b
    205e:	28 2f       	mov	r18, r24
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	ce 01       	movw	r24, r28
    2064:	4e 96       	adiw	r24, 0x1e	; 30
    2066:	fc 01       	movw	r30, r24
    2068:	e2 0f       	add	r30, r18
    206a:	f3 1f       	adc	r31, r19
    206c:	20 81       	ld	r18, Z
    206e:	ce 01       	movw	r24, r28
    2070:	0e 96       	adiw	r24, 0x0e	; 14
    2072:	fc 01       	movw	r30, r24
    2074:	e4 0f       	add	r30, r20
    2076:	f5 1f       	adc	r31, r21
    2078:	20 83       	st	Z, r18
    207a:	8d 85       	ldd	r24, Y+13	; 0x0d
    207c:	8f 5f       	subi	r24, 0xFF	; 255
    207e:	8d 87       	std	Y+13, r24	; 0x0d
	u8 Local_u8ArrForDigitsIDX=0;
	u8 feedback[16];
	while (1)
	{
        //Appending Previous Result into my array of digits
		for (u8 Local_u8Iter_FeedbackArr = 0; feedback[Local_u8Iter_FeedbackArr] != '\0' && Local_u8Iter_FeedbackArr < 16; Local_u8Iter_FeedbackArr++)
    2080:	8b 85       	ldd	r24, Y+11	; 0x0b
    2082:	8f 5f       	subi	r24, 0xFF	; 255
    2084:	8b 87       	std	Y+11, r24	; 0x0b
    2086:	8b 85       	ldd	r24, Y+11	; 0x0b
    2088:	28 2f       	mov	r18, r24
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	ce 01       	movw	r24, r28
    208e:	4e 96       	adiw	r24, 0x1e	; 30
    2090:	fc 01       	movw	r30, r24
    2092:	e2 0f       	add	r30, r18
    2094:	f3 1f       	adc	r31, r19
    2096:	80 81       	ld	r24, Z
    2098:	88 23       	and	r24, r24
    209a:	19 f0       	breq	.+6      	; 0x20a2 <main+0x74>
    209c:	8b 85       	ldd	r24, Y+11	; 0x0b
    209e:	80 31       	cpi	r24, 0x10	; 16
    20a0:	d0 f2       	brcs	.-76     	; 0x2056 <main+0x28>
		{
		    Local_u8ArrForDigits[Local_u8ArrForDigitsIDX++]= feedback[Local_u8Iter_FeedbackArr];
		}

		// Null-terminate Local_u8ArrForDigits
		Local_u8ArrForDigits[Local_u8ArrForDigitsIDX] = '\0';
    20a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a4:	28 2f       	mov	r18, r24
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	ce 01       	movw	r24, r28
    20aa:	0e 96       	adiw	r24, 0x0e	; 14
    20ac:	fc 01       	movw	r30, r24
    20ae:	e2 0f       	add	r30, r18
    20b0:	f3 1f       	adc	r31, r19
    20b2:	10 82       	st	Z, r1

		u8 Local_u8KeyValue = KPD_u8GetPressedKey();
    20b4:	0e 94 8b 0b 	call	0x1716	; 0x1716 <KPD_u8GetPressedKey>
    20b8:	8c 87       	std	Y+12, r24	; 0x0c

		if(Local_u8KeyValue!=0xff)
    20ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    20bc:	8f 3f       	cpi	r24, 0xFF	; 255
    20be:	49 f2       	breq	.-110    	; 0x2052 <main+0x24>
		{
			if(Local_u8KeyValue>=0 && Local_u8KeyValue<=9)
    20c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    20c2:	8a 30       	cpi	r24, 0x0A	; 10
    20c4:	a0 f4       	brcc	.+40     	; 0x20ee <main+0xc0>
			{
				Local_u8ArrForDigits[Local_u8ArrForDigitsIDX++]=Local_u8KeyValue+'0';
    20c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    20ce:	48 2f       	mov	r20, r24
    20d0:	40 5d       	subi	r20, 0xD0	; 208
    20d2:	ce 01       	movw	r24, r28
    20d4:	0e 96       	adiw	r24, 0x0e	; 14
    20d6:	fc 01       	movw	r30, r24
    20d8:	e2 0f       	add	r30, r18
    20da:	f3 1f       	adc	r31, r19
    20dc:	40 83       	st	Z, r20
    20de:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e0:	8f 5f       	subi	r24, 0xFF	; 255
    20e2:	8d 87       	std	Y+13, r24	; 0x0d
				LCD_enuDisplayChar(Local_u8KeyValue+'0');
    20e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    20e6:	80 5d       	subi	r24, 0xD0	; 208
    20e8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_enuDisplayChar>
    20ec:	b2 cf       	rjmp	.-156    	; 0x2052 <main+0x24>
			}
			else if(Local_u8KeyValue==SumKey)
    20ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    20f0:	8c 30       	cpi	r24, 0x0C	; 12
    20f2:	89 f4       	brne	.+34     	; 0x2116 <main+0xe8>
			{
				Local_u8ArrForDigits[Local_u8ArrForDigitsIDX++]= '+';
    20f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f6:	28 2f       	mov	r18, r24
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	ce 01       	movw	r24, r28
    20fc:	0e 96       	adiw	r24, 0x0e	; 14
    20fe:	fc 01       	movw	r30, r24
    2100:	e2 0f       	add	r30, r18
    2102:	f3 1f       	adc	r31, r19
    2104:	8b e2       	ldi	r24, 0x2B	; 43
    2106:	80 83       	st	Z, r24
    2108:	8d 85       	ldd	r24, Y+13	; 0x0d
    210a:	8f 5f       	subi	r24, 0xFF	; 255
    210c:	8d 87       	std	Y+13, r24	; 0x0d
				LCD_enuDisplayChar('+');
    210e:	8b e2       	ldi	r24, 0x2B	; 43
    2110:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_enuDisplayChar>
    2114:	9e cf       	rjmp	.-196    	; 0x2052 <main+0x24>
			}
			else if(Local_u8KeyValue==SubKey)
    2116:	8c 85       	ldd	r24, Y+12	; 0x0c
    2118:	8d 30       	cpi	r24, 0x0D	; 13
    211a:	89 f4       	brne	.+34     	; 0x213e <main+0x110>
			{
				Local_u8ArrForDigits[Local_u8ArrForDigitsIDX++]= '-';
    211c:	8d 85       	ldd	r24, Y+13	; 0x0d
    211e:	28 2f       	mov	r18, r24
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	ce 01       	movw	r24, r28
    2124:	0e 96       	adiw	r24, 0x0e	; 14
    2126:	fc 01       	movw	r30, r24
    2128:	e2 0f       	add	r30, r18
    212a:	f3 1f       	adc	r31, r19
    212c:	8d e2       	ldi	r24, 0x2D	; 45
    212e:	80 83       	st	Z, r24
    2130:	8d 85       	ldd	r24, Y+13	; 0x0d
    2132:	8f 5f       	subi	r24, 0xFF	; 255
    2134:	8d 87       	std	Y+13, r24	; 0x0d
				LCD_enuDisplayChar('-');
    2136:	8d e2       	ldi	r24, 0x2D	; 45
    2138:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_enuDisplayChar>
    213c:	8a cf       	rjmp	.-236    	; 0x2052 <main+0x24>
			}
			else if(Local_u8KeyValue==MultKey)
    213e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2140:	8e 30       	cpi	r24, 0x0E	; 14
    2142:	89 f4       	brne	.+34     	; 0x2166 <main+0x138>
			{
				Local_u8ArrForDigits[Local_u8ArrForDigitsIDX++]= '*';
    2144:	8d 85       	ldd	r24, Y+13	; 0x0d
    2146:	28 2f       	mov	r18, r24
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	ce 01       	movw	r24, r28
    214c:	0e 96       	adiw	r24, 0x0e	; 14
    214e:	fc 01       	movw	r30, r24
    2150:	e2 0f       	add	r30, r18
    2152:	f3 1f       	adc	r31, r19
    2154:	8a e2       	ldi	r24, 0x2A	; 42
    2156:	80 83       	st	Z, r24
    2158:	8d 85       	ldd	r24, Y+13	; 0x0d
    215a:	8f 5f       	subi	r24, 0xFF	; 255
    215c:	8d 87       	std	Y+13, r24	; 0x0d
				LCD_enuDisplayChar('*');
    215e:	8a e2       	ldi	r24, 0x2A	; 42
    2160:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_enuDisplayChar>
    2164:	76 cf       	rjmp	.-276    	; 0x2052 <main+0x24>
			}
			else if(Local_u8KeyValue==DivKey)
    2166:	8c 85       	ldd	r24, Y+12	; 0x0c
    2168:	8f 30       	cpi	r24, 0x0F	; 15
    216a:	89 f4       	brne	.+34     	; 0x218e <main+0x160>
			{
				Local_u8ArrForDigits[Local_u8ArrForDigitsIDX++]= '/';
    216c:	8d 85       	ldd	r24, Y+13	; 0x0d
    216e:	28 2f       	mov	r18, r24
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	ce 01       	movw	r24, r28
    2174:	0e 96       	adiw	r24, 0x0e	; 14
    2176:	fc 01       	movw	r30, r24
    2178:	e2 0f       	add	r30, r18
    217a:	f3 1f       	adc	r31, r19
    217c:	8f e2       	ldi	r24, 0x2F	; 47
    217e:	80 83       	st	Z, r24
    2180:	8d 85       	ldd	r24, Y+13	; 0x0d
    2182:	8f 5f       	subi	r24, 0xFF	; 255
    2184:	8d 87       	std	Y+13, r24	; 0x0d
				LCD_enuDisplayChar('/');
    2186:	8f e2       	ldi	r24, 0x2F	; 47
    2188:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_enuDisplayChar>
    218c:	62 cf       	rjmp	.-316    	; 0x2052 <main+0x24>
			}
			else if(Local_u8KeyValue==ClearKey)
    218e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2190:	8a 30       	cpi	r24, 0x0A	; 10
    2192:	31 f4       	brne	.+12     	; 0x21a0 <main+0x172>
			{
				LCD_enuSendCommand(0x01);
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <LCD_enuSendCommand>
				Local_u8ArrForDigitsIDX=0;
    219a:	1d 86       	std	Y+13, r1	; 0x0d
				Local_u8ArrForDigits[0]= '\0';
    219c:	1e 86       	std	Y+14, r1	; 0x0e
    219e:	59 cf       	rjmp	.-334    	; 0x2052 <main+0x24>
			}
			else if (Local_u8KeyValue== EqualKey)
    21a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    21a2:	8b 30       	cpi	r24, 0x0B	; 11
    21a4:	09 f0       	breq	.+2      	; 0x21a8 <main+0x17a>
    21a6:	55 cf       	rjmp	.-342    	; 0x2052 <main+0x24>
			{
				//Search on the operator / atoi arr before it to eperand1 / atoi arr after it to eperand2 / switch on operator.
				Local_u8ArrForDigits[Local_u8ArrForDigitsIDX++]= '\0';
    21a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	ce 01       	movw	r24, r28
    21b0:	0e 96       	adiw	r24, 0x0e	; 14
    21b2:	fc 01       	movw	r30, r24
    21b4:	e2 0f       	add	r30, r18
    21b6:	f3 1f       	adc	r31, r19
    21b8:	10 82       	st	Z, r1
    21ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    21bc:	8f 5f       	subi	r24, 0xFF	; 255
    21be:	8d 87       	std	Y+13, r24	; 0x0d
				Local_u8ArrForDigitsIDX=0;
    21c0:	1d 86       	std	Y+13, r1	; 0x0d
				LCD_enuSendCommand(0x01);
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <LCD_enuSendCommand>
				LCD_enuDisplayChar('=');
    21c8:	8d e3       	ldi	r24, 0x3D	; 61
    21ca:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_enuDisplayChar>
				s32 Local_u8Operand1;
				s32 Local_u8Operand2;
				u8 Local_u8Operator;

				s32 extractionResult = ExtractOperands(Local_u8ArrForDigits, &Local_u8Operand1, &Local_u8Operand2, &Local_u8Operator);
    21ce:	ce 01       	movw	r24, r28
    21d0:	0e 96       	adiw	r24, 0x0e	; 14
    21d2:	9e 01       	movw	r18, r28
    21d4:	22 5d       	subi	r18, 0xD2	; 210
    21d6:	3f 4f       	sbci	r19, 0xFF	; 255
    21d8:	ae 01       	movw	r20, r28
    21da:	4e 5c       	subi	r20, 0xCE	; 206
    21dc:	5f 4f       	sbci	r21, 0xFF	; 255
    21de:	fe 01       	movw	r30, r28
    21e0:	f6 96       	adiw	r30, 0x36	; 54
    21e2:	b9 01       	movw	r22, r18
    21e4:	9f 01       	movw	r18, r30
    21e6:	0e 94 9b 05 	call	0xb36	; 0xb36 <ExtractOperands>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	8f 83       	std	Y+7, r24	; 0x07
    21f0:	98 87       	std	Y+8, r25	; 0x08
    21f2:	a9 87       	std	Y+9, r26	; 0x09
    21f4:	ba 87       	std	Y+10, r27	; 0x0a
				Local_u8ArrForDigits[0]= '\0';
    21f6:	1e 86       	std	Y+14, r1	; 0x0e

				                if (extractionResult == OK)
    21f8:	8f 81       	ldd	r24, Y+7	; 0x07
    21fa:	98 85       	ldd	r25, Y+8	; 0x08
    21fc:	a9 85       	ldd	r26, Y+9	; 0x09
    21fe:	ba 85       	ldd	r27, Y+10	; 0x0a
    2200:	81 30       	cpi	r24, 0x01	; 1
    2202:	91 05       	cpc	r25, r1
    2204:	a1 05       	cpc	r26, r1
    2206:	b1 05       	cpc	r27, r1
    2208:	09 f0       	breq	.+2      	; 0x220c <main+0x1de>
    220a:	23 cf       	rjmp	.-442    	; 0x2052 <main+0x24>
				                {

				                    s32 result = 0;
    220c:	1b 82       	std	Y+3, r1	; 0x03
    220e:	1c 82       	std	Y+4, r1	; 0x04
    2210:	1d 82       	std	Y+5, r1	; 0x05
    2212:	1e 82       	std	Y+6, r1	; 0x06

				                    switch (Local_u8Operator)
    2214:	8e a9       	ldd	r24, Y+54	; 0x36
    2216:	28 2f       	mov	r18, r24
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	29 96       	adiw	r28, 0x09	; 9
    221c:	3f af       	std	Y+63, r19	; 0x3f
    221e:	2e af       	std	Y+62, r18	; 0x3e
    2220:	29 97       	sbiw	r28, 0x09	; 9
    2222:	29 96       	adiw	r28, 0x09	; 9
    2224:	8e ad       	ldd	r24, Y+62	; 0x3e
    2226:	9f ad       	ldd	r25, Y+63	; 0x3f
    2228:	29 97       	sbiw	r28, 0x09	; 9
    222a:	8b 32       	cpi	r24, 0x2B	; 43
    222c:	91 05       	cpc	r25, r1
    222e:	f1 f0       	breq	.+60     	; 0x226c <main+0x23e>
    2230:	29 96       	adiw	r28, 0x09	; 9
    2232:	2e ad       	ldd	r18, Y+62	; 0x3e
    2234:	3f ad       	ldd	r19, Y+63	; 0x3f
    2236:	29 97       	sbiw	r28, 0x09	; 9
    2238:	2c 32       	cpi	r18, 0x2C	; 44
    223a:	31 05       	cpc	r19, r1
    223c:	44 f4       	brge	.+16     	; 0x224e <main+0x220>
    223e:	29 96       	adiw	r28, 0x09	; 9
    2240:	8e ad       	ldd	r24, Y+62	; 0x3e
    2242:	9f ad       	ldd	r25, Y+63	; 0x3f
    2244:	29 97       	sbiw	r28, 0x09	; 9
    2246:	8a 32       	cpi	r24, 0x2A	; 42
    2248:	91 05       	cpc	r25, r1
    224a:	91 f1       	breq	.+100    	; 0x22b0 <main+0x282>
    224c:	62 c0       	rjmp	.+196    	; 0x2312 <main+0x2e4>
    224e:	29 96       	adiw	r28, 0x09	; 9
    2250:	2e ad       	ldd	r18, Y+62	; 0x3e
    2252:	3f ad       	ldd	r19, Y+63	; 0x3f
    2254:	29 97       	sbiw	r28, 0x09	; 9
    2256:	2d 32       	cpi	r18, 0x2D	; 45
    2258:	31 05       	cpc	r19, r1
    225a:	c9 f0       	breq	.+50     	; 0x228e <main+0x260>
    225c:	29 96       	adiw	r28, 0x09	; 9
    225e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2260:	9f ad       	ldd	r25, Y+63	; 0x3f
    2262:	29 97       	sbiw	r28, 0x09	; 9
    2264:	8f 32       	cpi	r24, 0x2F	; 47
    2266:	91 05       	cpc	r25, r1
    2268:	b1 f1       	breq	.+108    	; 0x22d6 <main+0x2a8>
    226a:	53 c0       	rjmp	.+166    	; 0x2312 <main+0x2e4>
				                    {
				                        case '+':
				                            result = Local_u8Operand1 + Local_u8Operand2;
    226c:	8e a5       	ldd	r24, Y+46	; 0x2e
    226e:	9f a5       	ldd	r25, Y+47	; 0x2f
    2270:	a8 a9       	ldd	r26, Y+48	; 0x30
    2272:	b9 a9       	ldd	r27, Y+49	; 0x31
    2274:	2a a9       	ldd	r18, Y+50	; 0x32
    2276:	3b a9       	ldd	r19, Y+51	; 0x33
    2278:	4c a9       	ldd	r20, Y+52	; 0x34
    227a:	5d a9       	ldd	r21, Y+53	; 0x35
    227c:	82 0f       	add	r24, r18
    227e:	93 1f       	adc	r25, r19
    2280:	a4 1f       	adc	r26, r20
    2282:	b5 1f       	adc	r27, r21
    2284:	8b 83       	std	Y+3, r24	; 0x03
    2286:	9c 83       	std	Y+4, r25	; 0x04
    2288:	ad 83       	std	Y+5, r26	; 0x05
    228a:	be 83       	std	Y+6, r27	; 0x06
    228c:	42 c0       	rjmp	.+132    	; 0x2312 <main+0x2e4>
				                            break;
				                        case '-':
				                            result = Local_u8Operand1 - Local_u8Operand2;
    228e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2290:	9f a5       	ldd	r25, Y+47	; 0x2f
    2292:	a8 a9       	ldd	r26, Y+48	; 0x30
    2294:	b9 a9       	ldd	r27, Y+49	; 0x31
    2296:	2a a9       	ldd	r18, Y+50	; 0x32
    2298:	3b a9       	ldd	r19, Y+51	; 0x33
    229a:	4c a9       	ldd	r20, Y+52	; 0x34
    229c:	5d a9       	ldd	r21, Y+53	; 0x35
    229e:	82 1b       	sub	r24, r18
    22a0:	93 0b       	sbc	r25, r19
    22a2:	a4 0b       	sbc	r26, r20
    22a4:	b5 0b       	sbc	r27, r21
    22a6:	8b 83       	std	Y+3, r24	; 0x03
    22a8:	9c 83       	std	Y+4, r25	; 0x04
    22aa:	ad 83       	std	Y+5, r26	; 0x05
    22ac:	be 83       	std	Y+6, r27	; 0x06
    22ae:	31 c0       	rjmp	.+98     	; 0x2312 <main+0x2e4>
				                            break;
				                        case '*':
				                            result = Local_u8Operand1 * Local_u8Operand2;
    22b0:	8e a5       	ldd	r24, Y+46	; 0x2e
    22b2:	9f a5       	ldd	r25, Y+47	; 0x2f
    22b4:	a8 a9       	ldd	r26, Y+48	; 0x30
    22b6:	b9 a9       	ldd	r27, Y+49	; 0x31
    22b8:	2a a9       	ldd	r18, Y+50	; 0x32
    22ba:	3b a9       	ldd	r19, Y+51	; 0x33
    22bc:	4c a9       	ldd	r20, Y+52	; 0x34
    22be:	5d a9       	ldd	r21, Y+53	; 0x35
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <__mulsi3>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	8b 83       	std	Y+3, r24	; 0x03
    22ce:	9c 83       	std	Y+4, r25	; 0x04
    22d0:	ad 83       	std	Y+5, r26	; 0x05
    22d2:	be 83       	std	Y+6, r27	; 0x06
    22d4:	1e c0       	rjmp	.+60     	; 0x2312 <main+0x2e4>
				                            break;
				                        case '/':
				                            if (Local_u8Operand2 != 0)
    22d6:	8a a9       	ldd	r24, Y+50	; 0x32
    22d8:	9b a9       	ldd	r25, Y+51	; 0x33
    22da:	ac a9       	ldd	r26, Y+52	; 0x34
    22dc:	bd a9       	ldd	r27, Y+53	; 0x35
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	a1 05       	cpc	r26, r1
    22e2:	b1 05       	cpc	r27, r1
    22e4:	99 f0       	breq	.+38     	; 0x230c <main+0x2de>
				                            {
				                            	result = Local_u8Operand1 / Local_u8Operand2;
    22e6:	8e a5       	ldd	r24, Y+46	; 0x2e
    22e8:	9f a5       	ldd	r25, Y+47	; 0x2f
    22ea:	a8 a9       	ldd	r26, Y+48	; 0x30
    22ec:	b9 a9       	ldd	r27, Y+49	; 0x31
    22ee:	2a a9       	ldd	r18, Y+50	; 0x32
    22f0:	3b a9       	ldd	r19, Y+51	; 0x33
    22f2:	4c a9       	ldd	r20, Y+52	; 0x34
    22f4:	5d a9       	ldd	r21, Y+53	; 0x35
    22f6:	bc 01       	movw	r22, r24
    22f8:	cd 01       	movw	r24, r26
    22fa:	0e 94 09 12 	call	0x2412	; 0x2412 <__divmodsi4>
    22fe:	da 01       	movw	r26, r20
    2300:	c9 01       	movw	r24, r18
    2302:	8b 83       	std	Y+3, r24	; 0x03
    2304:	9c 83       	std	Y+4, r25	; 0x04
    2306:	ad 83       	std	Y+5, r26	; 0x05
    2308:	be 83       	std	Y+6, r27	; 0x06
    230a:	03 c0       	rjmp	.+6      	; 0x2312 <main+0x2e4>
				                            }
				                            else
				                            {
				                            	LCD_enuDisplayChar('E');
    230c:	85 e4       	ldi	r24, 0x45	; 69
    230e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_enuDisplayChar>
				                    }


				                    // Display the result on the LCD
				                     char resultStr[16];
				                     sprintf(resultStr, "%d", result);
    2312:	2d b7       	in	r18, 0x3d	; 61
    2314:	3e b7       	in	r19, 0x3e	; 62
    2316:	28 50       	subi	r18, 0x08	; 8
    2318:	30 40       	sbci	r19, 0x00	; 0
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	3e bf       	out	0x3e, r19	; 62
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	2d bf       	out	0x3d, r18	; 61
    2324:	ed b7       	in	r30, 0x3d	; 61
    2326:	fe b7       	in	r31, 0x3e	; 62
    2328:	31 96       	adiw	r30, 0x01	; 1
    232a:	ce 01       	movw	r24, r28
    232c:	c7 96       	adiw	r24, 0x37	; 55
    232e:	91 83       	std	Z+1, r25	; 0x01
    2330:	80 83       	st	Z, r24
    2332:	80 e6       	ldi	r24, 0x60	; 96
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	93 83       	std	Z+3, r25	; 0x03
    2338:	82 83       	std	Z+2, r24	; 0x02
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	9c 81       	ldd	r25, Y+4	; 0x04
    233e:	ad 81       	ldd	r26, Y+5	; 0x05
    2340:	be 81       	ldd	r27, Y+6	; 0x06
    2342:	84 83       	std	Z+4, r24	; 0x04
    2344:	95 83       	std	Z+5, r25	; 0x05
    2346:	a6 83       	std	Z+6, r26	; 0x06
    2348:	b7 83       	std	Z+7, r27	; 0x07
    234a:	0e 94 c2 12 	call	0x2584	; 0x2584 <sprintf>
    234e:	8d b7       	in	r24, 0x3d	; 61
    2350:	9e b7       	in	r25, 0x3e	; 62
    2352:	08 96       	adiw	r24, 0x08	; 8
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	9e bf       	out	0x3e, r25	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	8d bf       	out	0x3d, r24	; 61
				                     // Determine the length of the result string
				                     u8 resultLength = strlen(resultStr);
    235e:	ce 01       	movw	r24, r28
    2360:	c7 96       	adiw	r24, 0x37	; 55
    2362:	0e 94 a2 12 	call	0x2544	; 0x2544 <strlen>
    2366:	8a 83       	std	Y+2, r24	; 0x02
				                         resultStr[resultLength] = '\0';
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	ce 01       	movw	r24, r28
    2370:	c7 96       	adiw	r24, 0x37	; 55
    2372:	fc 01       	movw	r30, r24
    2374:	e2 0f       	add	r30, r18
    2376:	f3 1f       	adc	r31, r19
    2378:	10 82       	st	Z, r1

				                     strcpy(feedback, resultStr);
    237a:	ce 01       	movw	r24, r28
    237c:	4e 96       	adiw	r24, 0x1e	; 30
    237e:	9e 01       	movw	r18, r28
    2380:	29 5c       	subi	r18, 0xC9	; 201
    2382:	3f 4f       	sbci	r19, 0xFF	; 255
    2384:	b9 01       	movw	r22, r18
    2386:	0e 94 9b 12 	call	0x2536	; 0x2536 <strcpy>
				                     if(Local_u8Operand2 != 0)
    238a:	8a a9       	ldd	r24, Y+50	; 0x32
    238c:	9b a9       	ldd	r25, Y+51	; 0x33
    238e:	ac a9       	ldd	r26, Y+52	; 0x34
    2390:	bd a9       	ldd	r27, Y+53	; 0x35
    2392:	00 97       	sbiw	r24, 0x00	; 0
    2394:	a1 05       	cpc	r26, r1
    2396:	b1 05       	cpc	r27, r1
    2398:	09 f4       	brne	.+2      	; 0x239c <main+0x36e>
    239a:	5b ce       	rjmp	.-842    	; 0x2052 <main+0x24>
				                     {
					                     for(u8 Local_u8Iter_resStrArr=0; resultStr[Local_u8Iter_resStrArr]!='\0'; Local_u8Iter_resStrArr++)
    239c:	19 82       	std	Y+1, r1	; 0x01
    239e:	0e c0       	rjmp	.+28     	; 0x23bc <main+0x38e>
					                     {
					                    	 LCD_enuDisplayChar(resultStr[Local_u8Iter_resStrArr]);
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	28 2f       	mov	r18, r24
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	ce 01       	movw	r24, r28
    23a8:	c7 96       	adiw	r24, 0x37	; 55
    23aa:	fc 01       	movw	r30, r24
    23ac:	e2 0f       	add	r30, r18
    23ae:	f3 1f       	adc	r31, r19
    23b0:	80 81       	ld	r24, Z
    23b2:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_enuDisplayChar>
				                         resultStr[resultLength] = '\0';

				                     strcpy(feedback, resultStr);
				                     if(Local_u8Operand2 != 0)
				                     {
					                     for(u8 Local_u8Iter_resStrArr=0; resultStr[Local_u8Iter_resStrArr]!='\0'; Local_u8Iter_resStrArr++)
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	8f 5f       	subi	r24, 0xFF	; 255
    23ba:	89 83       	std	Y+1, r24	; 0x01
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	28 2f       	mov	r18, r24
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	ce 01       	movw	r24, r28
    23c4:	c7 96       	adiw	r24, 0x37	; 55
    23c6:	fc 01       	movw	r30, r24
    23c8:	e2 0f       	add	r30, r18
    23ca:	f3 1f       	adc	r31, r19
    23cc:	80 81       	ld	r24, Z
    23ce:	88 23       	and	r24, r24
    23d0:	39 f7       	brne	.-50     	; 0x23a0 <main+0x372>
    23d2:	3f ce       	rjmp	.-898    	; 0x2052 <main+0x24>

000023d4 <__mulsi3>:
    23d4:	62 9f       	mul	r22, r18
    23d6:	d0 01       	movw	r26, r0
    23d8:	73 9f       	mul	r23, r19
    23da:	f0 01       	movw	r30, r0
    23dc:	82 9f       	mul	r24, r18
    23de:	e0 0d       	add	r30, r0
    23e0:	f1 1d       	adc	r31, r1
    23e2:	64 9f       	mul	r22, r20
    23e4:	e0 0d       	add	r30, r0
    23e6:	f1 1d       	adc	r31, r1
    23e8:	92 9f       	mul	r25, r18
    23ea:	f0 0d       	add	r31, r0
    23ec:	83 9f       	mul	r24, r19
    23ee:	f0 0d       	add	r31, r0
    23f0:	74 9f       	mul	r23, r20
    23f2:	f0 0d       	add	r31, r0
    23f4:	65 9f       	mul	r22, r21
    23f6:	f0 0d       	add	r31, r0
    23f8:	99 27       	eor	r25, r25
    23fa:	72 9f       	mul	r23, r18
    23fc:	b0 0d       	add	r27, r0
    23fe:	e1 1d       	adc	r30, r1
    2400:	f9 1f       	adc	r31, r25
    2402:	63 9f       	mul	r22, r19
    2404:	b0 0d       	add	r27, r0
    2406:	e1 1d       	adc	r30, r1
    2408:	f9 1f       	adc	r31, r25
    240a:	bd 01       	movw	r22, r26
    240c:	cf 01       	movw	r24, r30
    240e:	11 24       	eor	r1, r1
    2410:	08 95       	ret

00002412 <__divmodsi4>:
    2412:	97 fb       	bst	r25, 7
    2414:	09 2e       	mov	r0, r25
    2416:	05 26       	eor	r0, r21
    2418:	0e d0       	rcall	.+28     	; 0x2436 <__divmodsi4_neg1>
    241a:	57 fd       	sbrc	r21, 7
    241c:	04 d0       	rcall	.+8      	; 0x2426 <__divmodsi4_neg2>
    241e:	14 d0       	rcall	.+40     	; 0x2448 <__udivmodsi4>
    2420:	0a d0       	rcall	.+20     	; 0x2436 <__divmodsi4_neg1>
    2422:	00 1c       	adc	r0, r0
    2424:	38 f4       	brcc	.+14     	; 0x2434 <__divmodsi4_exit>

00002426 <__divmodsi4_neg2>:
    2426:	50 95       	com	r21
    2428:	40 95       	com	r20
    242a:	30 95       	com	r19
    242c:	21 95       	neg	r18
    242e:	3f 4f       	sbci	r19, 0xFF	; 255
    2430:	4f 4f       	sbci	r20, 0xFF	; 255
    2432:	5f 4f       	sbci	r21, 0xFF	; 255

00002434 <__divmodsi4_exit>:
    2434:	08 95       	ret

00002436 <__divmodsi4_neg1>:
    2436:	f6 f7       	brtc	.-4      	; 0x2434 <__divmodsi4_exit>
    2438:	90 95       	com	r25
    243a:	80 95       	com	r24
    243c:	70 95       	com	r23
    243e:	61 95       	neg	r22
    2440:	7f 4f       	sbci	r23, 0xFF	; 255
    2442:	8f 4f       	sbci	r24, 0xFF	; 255
    2444:	9f 4f       	sbci	r25, 0xFF	; 255
    2446:	08 95       	ret

00002448 <__udivmodsi4>:
    2448:	a1 e2       	ldi	r26, 0x21	; 33
    244a:	1a 2e       	mov	r1, r26
    244c:	aa 1b       	sub	r26, r26
    244e:	bb 1b       	sub	r27, r27
    2450:	fd 01       	movw	r30, r26
    2452:	0d c0       	rjmp	.+26     	; 0x246e <__udivmodsi4_ep>

00002454 <__udivmodsi4_loop>:
    2454:	aa 1f       	adc	r26, r26
    2456:	bb 1f       	adc	r27, r27
    2458:	ee 1f       	adc	r30, r30
    245a:	ff 1f       	adc	r31, r31
    245c:	a2 17       	cp	r26, r18
    245e:	b3 07       	cpc	r27, r19
    2460:	e4 07       	cpc	r30, r20
    2462:	f5 07       	cpc	r31, r21
    2464:	20 f0       	brcs	.+8      	; 0x246e <__udivmodsi4_ep>
    2466:	a2 1b       	sub	r26, r18
    2468:	b3 0b       	sbc	r27, r19
    246a:	e4 0b       	sbc	r30, r20
    246c:	f5 0b       	sbc	r31, r21

0000246e <__udivmodsi4_ep>:
    246e:	66 1f       	adc	r22, r22
    2470:	77 1f       	adc	r23, r23
    2472:	88 1f       	adc	r24, r24
    2474:	99 1f       	adc	r25, r25
    2476:	1a 94       	dec	r1
    2478:	69 f7       	brne	.-38     	; 0x2454 <__udivmodsi4_loop>
    247a:	60 95       	com	r22
    247c:	70 95       	com	r23
    247e:	80 95       	com	r24
    2480:	90 95       	com	r25
    2482:	9b 01       	movw	r18, r22
    2484:	ac 01       	movw	r20, r24
    2486:	bd 01       	movw	r22, r26
    2488:	cf 01       	movw	r24, r30
    248a:	08 95       	ret

0000248c <__prologue_saves__>:
    248c:	2f 92       	push	r2
    248e:	3f 92       	push	r3
    2490:	4f 92       	push	r4
    2492:	5f 92       	push	r5
    2494:	6f 92       	push	r6
    2496:	7f 92       	push	r7
    2498:	8f 92       	push	r8
    249a:	9f 92       	push	r9
    249c:	af 92       	push	r10
    249e:	bf 92       	push	r11
    24a0:	cf 92       	push	r12
    24a2:	df 92       	push	r13
    24a4:	ef 92       	push	r14
    24a6:	ff 92       	push	r15
    24a8:	0f 93       	push	r16
    24aa:	1f 93       	push	r17
    24ac:	cf 93       	push	r28
    24ae:	df 93       	push	r29
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
    24b4:	ca 1b       	sub	r28, r26
    24b6:	db 0b       	sbc	r29, r27
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	f8 94       	cli
    24bc:	de bf       	out	0x3e, r29	; 62
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	cd bf       	out	0x3d, r28	; 61
    24c2:	09 94       	ijmp

000024c4 <__epilogue_restores__>:
    24c4:	2a 88       	ldd	r2, Y+18	; 0x12
    24c6:	39 88       	ldd	r3, Y+17	; 0x11
    24c8:	48 88       	ldd	r4, Y+16	; 0x10
    24ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    24cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    24ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    24d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    24d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    24d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    24d6:	b9 84       	ldd	r11, Y+9	; 0x09
    24d8:	c8 84       	ldd	r12, Y+8	; 0x08
    24da:	df 80       	ldd	r13, Y+7	; 0x07
    24dc:	ee 80       	ldd	r14, Y+6	; 0x06
    24de:	fd 80       	ldd	r15, Y+5	; 0x05
    24e0:	0c 81       	ldd	r16, Y+4	; 0x04
    24e2:	1b 81       	ldd	r17, Y+3	; 0x03
    24e4:	aa 81       	ldd	r26, Y+2	; 0x02
    24e6:	b9 81       	ldd	r27, Y+1	; 0x01
    24e8:	ce 0f       	add	r28, r30
    24ea:	d1 1d       	adc	r29, r1
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	ed 01       	movw	r28, r26
    24f8:	08 95       	ret

000024fa <atoi>:
    24fa:	fc 01       	movw	r30, r24
    24fc:	88 27       	eor	r24, r24
    24fe:	99 27       	eor	r25, r25
    2500:	e8 94       	clt
    2502:	21 91       	ld	r18, Z+
    2504:	20 32       	cpi	r18, 0x20	; 32
    2506:	e9 f3       	breq	.-6      	; 0x2502 <atoi+0x8>
    2508:	29 30       	cpi	r18, 0x09	; 9
    250a:	10 f0       	brcs	.+4      	; 0x2510 <atoi+0x16>
    250c:	2e 30       	cpi	r18, 0x0E	; 14
    250e:	c8 f3       	brcs	.-14     	; 0x2502 <atoi+0x8>
    2510:	2b 32       	cpi	r18, 0x2B	; 43
    2512:	41 f0       	breq	.+16     	; 0x2524 <atoi+0x2a>
    2514:	2d 32       	cpi	r18, 0x2D	; 45
    2516:	39 f4       	brne	.+14     	; 0x2526 <atoi+0x2c>
    2518:	68 94       	set
    251a:	04 c0       	rjmp	.+8      	; 0x2524 <atoi+0x2a>
    251c:	0e 94 ba 12 	call	0x2574	; 0x2574 <__mulhi_const_10>
    2520:	82 0f       	add	r24, r18
    2522:	91 1d       	adc	r25, r1
    2524:	21 91       	ld	r18, Z+
    2526:	20 53       	subi	r18, 0x30	; 48
    2528:	2a 30       	cpi	r18, 0x0A	; 10
    252a:	c0 f3       	brcs	.-16     	; 0x251c <atoi+0x22>
    252c:	1e f4       	brtc	.+6      	; 0x2534 <atoi+0x3a>
    252e:	90 95       	com	r25
    2530:	81 95       	neg	r24
    2532:	9f 4f       	sbci	r25, 0xFF	; 255
    2534:	08 95       	ret

00002536 <strcpy>:
    2536:	fb 01       	movw	r30, r22
    2538:	dc 01       	movw	r26, r24
    253a:	01 90       	ld	r0, Z+
    253c:	0d 92       	st	X+, r0
    253e:	00 20       	and	r0, r0
    2540:	e1 f7       	brne	.-8      	; 0x253a <strcpy+0x4>
    2542:	08 95       	ret

00002544 <strlen>:
    2544:	fc 01       	movw	r30, r24
    2546:	01 90       	ld	r0, Z+
    2548:	00 20       	and	r0, r0
    254a:	e9 f7       	brne	.-6      	; 0x2546 <strlen+0x2>
    254c:	80 95       	com	r24
    254e:	90 95       	com	r25
    2550:	8e 0f       	add	r24, r30
    2552:	9f 1f       	adc	r25, r31
    2554:	08 95       	ret

00002556 <strncpy>:
    2556:	fb 01       	movw	r30, r22
    2558:	dc 01       	movw	r26, r24
    255a:	41 50       	subi	r20, 0x01	; 1
    255c:	50 40       	sbci	r21, 0x00	; 0
    255e:	48 f0       	brcs	.+18     	; 0x2572 <strncpy+0x1c>
    2560:	01 90       	ld	r0, Z+
    2562:	0d 92       	st	X+, r0
    2564:	00 20       	and	r0, r0
    2566:	c9 f7       	brne	.-14     	; 0x255a <strncpy+0x4>
    2568:	01 c0       	rjmp	.+2      	; 0x256c <strncpy+0x16>
    256a:	1d 92       	st	X+, r1
    256c:	41 50       	subi	r20, 0x01	; 1
    256e:	50 40       	sbci	r21, 0x00	; 0
    2570:	e0 f7       	brcc	.-8      	; 0x256a <strncpy+0x14>
    2572:	08 95       	ret

00002574 <__mulhi_const_10>:
    2574:	7a e0       	ldi	r23, 0x0A	; 10
    2576:	97 9f       	mul	r25, r23
    2578:	90 2d       	mov	r25, r0
    257a:	87 9f       	mul	r24, r23
    257c:	80 2d       	mov	r24, r0
    257e:	91 0d       	add	r25, r1
    2580:	11 24       	eor	r1, r1
    2582:	08 95       	ret

00002584 <sprintf>:
    2584:	ae e0       	ldi	r26, 0x0E	; 14
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e8 ec       	ldi	r30, 0xC8	; 200
    258a:	f2 e1       	ldi	r31, 0x12	; 18
    258c:	0c 94 54 12 	jmp	0x24a8	; 0x24a8 <__prologue_saves__+0x1c>
    2590:	0d 89       	ldd	r16, Y+21	; 0x15
    2592:	1e 89       	ldd	r17, Y+22	; 0x16
    2594:	86 e0       	ldi	r24, 0x06	; 6
    2596:	8c 83       	std	Y+4, r24	; 0x04
    2598:	1a 83       	std	Y+2, r17	; 0x02
    259a:	09 83       	std	Y+1, r16	; 0x01
    259c:	8f ef       	ldi	r24, 0xFF	; 255
    259e:	9f e7       	ldi	r25, 0x7F	; 127
    25a0:	9e 83       	std	Y+6, r25	; 0x06
    25a2:	8d 83       	std	Y+5, r24	; 0x05
    25a4:	9e 01       	movw	r18, r28
    25a6:	27 5e       	subi	r18, 0xE7	; 231
    25a8:	3f 4f       	sbci	r19, 0xFF	; 255
    25aa:	ce 01       	movw	r24, r28
    25ac:	01 96       	adiw	r24, 0x01	; 1
    25ae:	6f 89       	ldd	r22, Y+23	; 0x17
    25b0:	78 8d       	ldd	r23, Y+24	; 0x18
    25b2:	a9 01       	movw	r20, r18
    25b4:	0e 94 e6 12 	call	0x25cc	; 0x25cc <vfprintf>
    25b8:	2f 81       	ldd	r18, Y+7	; 0x07
    25ba:	38 85       	ldd	r19, Y+8	; 0x08
    25bc:	02 0f       	add	r16, r18
    25be:	13 1f       	adc	r17, r19
    25c0:	f8 01       	movw	r30, r16
    25c2:	10 82       	st	Z, r1
    25c4:	2e 96       	adiw	r28, 0x0e	; 14
    25c6:	e4 e0       	ldi	r30, 0x04	; 4
    25c8:	0c 94 70 12 	jmp	0x24e0	; 0x24e0 <__epilogue_restores__+0x1c>

000025cc <vfprintf>:
    25cc:	ab e0       	ldi	r26, 0x0B	; 11
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	ec ee       	ldi	r30, 0xEC	; 236
    25d2:	f2 e1       	ldi	r31, 0x12	; 18
    25d4:	0c 94 46 12 	jmp	0x248c	; 0x248c <__prologue_saves__>
    25d8:	3c 01       	movw	r6, r24
    25da:	2b 01       	movw	r4, r22
    25dc:	5a 01       	movw	r10, r20
    25de:	fc 01       	movw	r30, r24
    25e0:	17 82       	std	Z+7, r1	; 0x07
    25e2:	16 82       	std	Z+6, r1	; 0x06
    25e4:	83 81       	ldd	r24, Z+3	; 0x03
    25e6:	81 fd       	sbrc	r24, 1
    25e8:	03 c0       	rjmp	.+6      	; 0x25f0 <vfprintf+0x24>
    25ea:	6f ef       	ldi	r22, 0xFF	; 255
    25ec:	7f ef       	ldi	r23, 0xFF	; 255
    25ee:	c6 c1       	rjmp	.+908    	; 0x297c <vfprintf+0x3b0>
    25f0:	9a e0       	ldi	r25, 0x0A	; 10
    25f2:	89 2e       	mov	r8, r25
    25f4:	1e 01       	movw	r2, r28
    25f6:	08 94       	sec
    25f8:	21 1c       	adc	r2, r1
    25fa:	31 1c       	adc	r3, r1
    25fc:	f3 01       	movw	r30, r6
    25fe:	23 81       	ldd	r18, Z+3	; 0x03
    2600:	f2 01       	movw	r30, r4
    2602:	23 fd       	sbrc	r18, 3
    2604:	85 91       	lpm	r24, Z+
    2606:	23 ff       	sbrs	r18, 3
    2608:	81 91       	ld	r24, Z+
    260a:	2f 01       	movw	r4, r30
    260c:	88 23       	and	r24, r24
    260e:	09 f4       	brne	.+2      	; 0x2612 <vfprintf+0x46>
    2610:	b2 c1       	rjmp	.+868    	; 0x2976 <vfprintf+0x3aa>
    2612:	85 32       	cpi	r24, 0x25	; 37
    2614:	39 f4       	brne	.+14     	; 0x2624 <vfprintf+0x58>
    2616:	23 fd       	sbrc	r18, 3
    2618:	85 91       	lpm	r24, Z+
    261a:	23 ff       	sbrs	r18, 3
    261c:	81 91       	ld	r24, Z+
    261e:	2f 01       	movw	r4, r30
    2620:	85 32       	cpi	r24, 0x25	; 37
    2622:	29 f4       	brne	.+10     	; 0x262e <vfprintf+0x62>
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	b3 01       	movw	r22, r6
    2628:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <fputc>
    262c:	e7 cf       	rjmp	.-50     	; 0x25fc <vfprintf+0x30>
    262e:	98 2f       	mov	r25, r24
    2630:	ff 24       	eor	r15, r15
    2632:	ee 24       	eor	r14, r14
    2634:	99 24       	eor	r9, r9
    2636:	ff e1       	ldi	r31, 0x1F	; 31
    2638:	ff 15       	cp	r31, r15
    263a:	d0 f0       	brcs	.+52     	; 0x2670 <vfprintf+0xa4>
    263c:	9b 32       	cpi	r25, 0x2B	; 43
    263e:	69 f0       	breq	.+26     	; 0x265a <vfprintf+0x8e>
    2640:	9c 32       	cpi	r25, 0x2C	; 44
    2642:	28 f4       	brcc	.+10     	; 0x264e <vfprintf+0x82>
    2644:	90 32       	cpi	r25, 0x20	; 32
    2646:	59 f0       	breq	.+22     	; 0x265e <vfprintf+0x92>
    2648:	93 32       	cpi	r25, 0x23	; 35
    264a:	91 f4       	brne	.+36     	; 0x2670 <vfprintf+0xa4>
    264c:	0e c0       	rjmp	.+28     	; 0x266a <vfprintf+0x9e>
    264e:	9d 32       	cpi	r25, 0x2D	; 45
    2650:	49 f0       	breq	.+18     	; 0x2664 <vfprintf+0x98>
    2652:	90 33       	cpi	r25, 0x30	; 48
    2654:	69 f4       	brne	.+26     	; 0x2670 <vfprintf+0xa4>
    2656:	41 e0       	ldi	r20, 0x01	; 1
    2658:	24 c0       	rjmp	.+72     	; 0x26a2 <vfprintf+0xd6>
    265a:	52 e0       	ldi	r21, 0x02	; 2
    265c:	f5 2a       	or	r15, r21
    265e:	84 e0       	ldi	r24, 0x04	; 4
    2660:	f8 2a       	or	r15, r24
    2662:	28 c0       	rjmp	.+80     	; 0x26b4 <vfprintf+0xe8>
    2664:	98 e0       	ldi	r25, 0x08	; 8
    2666:	f9 2a       	or	r15, r25
    2668:	25 c0       	rjmp	.+74     	; 0x26b4 <vfprintf+0xe8>
    266a:	e0 e1       	ldi	r30, 0x10	; 16
    266c:	fe 2a       	or	r15, r30
    266e:	22 c0       	rjmp	.+68     	; 0x26b4 <vfprintf+0xe8>
    2670:	f7 fc       	sbrc	r15, 7
    2672:	29 c0       	rjmp	.+82     	; 0x26c6 <vfprintf+0xfa>
    2674:	89 2f       	mov	r24, r25
    2676:	80 53       	subi	r24, 0x30	; 48
    2678:	8a 30       	cpi	r24, 0x0A	; 10
    267a:	70 f4       	brcc	.+28     	; 0x2698 <vfprintf+0xcc>
    267c:	f6 fe       	sbrs	r15, 6
    267e:	05 c0       	rjmp	.+10     	; 0x268a <vfprintf+0xbe>
    2680:	98 9c       	mul	r9, r8
    2682:	90 2c       	mov	r9, r0
    2684:	11 24       	eor	r1, r1
    2686:	98 0e       	add	r9, r24
    2688:	15 c0       	rjmp	.+42     	; 0x26b4 <vfprintf+0xe8>
    268a:	e8 9c       	mul	r14, r8
    268c:	e0 2c       	mov	r14, r0
    268e:	11 24       	eor	r1, r1
    2690:	e8 0e       	add	r14, r24
    2692:	f0 e2       	ldi	r31, 0x20	; 32
    2694:	ff 2a       	or	r15, r31
    2696:	0e c0       	rjmp	.+28     	; 0x26b4 <vfprintf+0xe8>
    2698:	9e 32       	cpi	r25, 0x2E	; 46
    269a:	29 f4       	brne	.+10     	; 0x26a6 <vfprintf+0xda>
    269c:	f6 fc       	sbrc	r15, 6
    269e:	6b c1       	rjmp	.+726    	; 0x2976 <vfprintf+0x3aa>
    26a0:	40 e4       	ldi	r20, 0x40	; 64
    26a2:	f4 2a       	or	r15, r20
    26a4:	07 c0       	rjmp	.+14     	; 0x26b4 <vfprintf+0xe8>
    26a6:	9c 36       	cpi	r25, 0x6C	; 108
    26a8:	19 f4       	brne	.+6      	; 0x26b0 <vfprintf+0xe4>
    26aa:	50 e8       	ldi	r21, 0x80	; 128
    26ac:	f5 2a       	or	r15, r21
    26ae:	02 c0       	rjmp	.+4      	; 0x26b4 <vfprintf+0xe8>
    26b0:	98 36       	cpi	r25, 0x68	; 104
    26b2:	49 f4       	brne	.+18     	; 0x26c6 <vfprintf+0xfa>
    26b4:	f2 01       	movw	r30, r4
    26b6:	23 fd       	sbrc	r18, 3
    26b8:	95 91       	lpm	r25, Z+
    26ba:	23 ff       	sbrs	r18, 3
    26bc:	91 91       	ld	r25, Z+
    26be:	2f 01       	movw	r4, r30
    26c0:	99 23       	and	r25, r25
    26c2:	09 f0       	breq	.+2      	; 0x26c6 <vfprintf+0xfa>
    26c4:	b8 cf       	rjmp	.-144    	; 0x2636 <vfprintf+0x6a>
    26c6:	89 2f       	mov	r24, r25
    26c8:	85 54       	subi	r24, 0x45	; 69
    26ca:	83 30       	cpi	r24, 0x03	; 3
    26cc:	18 f0       	brcs	.+6      	; 0x26d4 <vfprintf+0x108>
    26ce:	80 52       	subi	r24, 0x20	; 32
    26d0:	83 30       	cpi	r24, 0x03	; 3
    26d2:	38 f4       	brcc	.+14     	; 0x26e2 <vfprintf+0x116>
    26d4:	44 e0       	ldi	r20, 0x04	; 4
    26d6:	50 e0       	ldi	r21, 0x00	; 0
    26d8:	a4 0e       	add	r10, r20
    26da:	b5 1e       	adc	r11, r21
    26dc:	5f e3       	ldi	r21, 0x3F	; 63
    26de:	59 83       	std	Y+1, r21	; 0x01
    26e0:	0f c0       	rjmp	.+30     	; 0x2700 <vfprintf+0x134>
    26e2:	93 36       	cpi	r25, 0x63	; 99
    26e4:	31 f0       	breq	.+12     	; 0x26f2 <vfprintf+0x126>
    26e6:	93 37       	cpi	r25, 0x73	; 115
    26e8:	79 f0       	breq	.+30     	; 0x2708 <vfprintf+0x13c>
    26ea:	93 35       	cpi	r25, 0x53	; 83
    26ec:	09 f0       	breq	.+2      	; 0x26f0 <vfprintf+0x124>
    26ee:	56 c0       	rjmp	.+172    	; 0x279c <vfprintf+0x1d0>
    26f0:	20 c0       	rjmp	.+64     	; 0x2732 <vfprintf+0x166>
    26f2:	f5 01       	movw	r30, r10
    26f4:	80 81       	ld	r24, Z
    26f6:	89 83       	std	Y+1, r24	; 0x01
    26f8:	42 e0       	ldi	r20, 0x02	; 2
    26fa:	50 e0       	ldi	r21, 0x00	; 0
    26fc:	a4 0e       	add	r10, r20
    26fe:	b5 1e       	adc	r11, r21
    2700:	61 01       	movw	r12, r2
    2702:	01 e0       	ldi	r16, 0x01	; 1
    2704:	10 e0       	ldi	r17, 0x00	; 0
    2706:	12 c0       	rjmp	.+36     	; 0x272c <vfprintf+0x160>
    2708:	f5 01       	movw	r30, r10
    270a:	c0 80       	ld	r12, Z
    270c:	d1 80       	ldd	r13, Z+1	; 0x01
    270e:	f6 fc       	sbrc	r15, 6
    2710:	03 c0       	rjmp	.+6      	; 0x2718 <vfprintf+0x14c>
    2712:	6f ef       	ldi	r22, 0xFF	; 255
    2714:	7f ef       	ldi	r23, 0xFF	; 255
    2716:	02 c0       	rjmp	.+4      	; 0x271c <vfprintf+0x150>
    2718:	69 2d       	mov	r22, r9
    271a:	70 e0       	ldi	r23, 0x00	; 0
    271c:	42 e0       	ldi	r20, 0x02	; 2
    271e:	50 e0       	ldi	r21, 0x00	; 0
    2720:	a4 0e       	add	r10, r20
    2722:	b5 1e       	adc	r11, r21
    2724:	c6 01       	movw	r24, r12
    2726:	0e 94 ce 14 	call	0x299c	; 0x299c <strnlen>
    272a:	8c 01       	movw	r16, r24
    272c:	5f e7       	ldi	r21, 0x7F	; 127
    272e:	f5 22       	and	r15, r21
    2730:	14 c0       	rjmp	.+40     	; 0x275a <vfprintf+0x18e>
    2732:	f5 01       	movw	r30, r10
    2734:	c0 80       	ld	r12, Z
    2736:	d1 80       	ldd	r13, Z+1	; 0x01
    2738:	f6 fc       	sbrc	r15, 6
    273a:	03 c0       	rjmp	.+6      	; 0x2742 <vfprintf+0x176>
    273c:	6f ef       	ldi	r22, 0xFF	; 255
    273e:	7f ef       	ldi	r23, 0xFF	; 255
    2740:	02 c0       	rjmp	.+4      	; 0x2746 <vfprintf+0x17a>
    2742:	69 2d       	mov	r22, r9
    2744:	70 e0       	ldi	r23, 0x00	; 0
    2746:	42 e0       	ldi	r20, 0x02	; 2
    2748:	50 e0       	ldi	r21, 0x00	; 0
    274a:	a4 0e       	add	r10, r20
    274c:	b5 1e       	adc	r11, r21
    274e:	c6 01       	movw	r24, r12
    2750:	0e 94 c3 14 	call	0x2986	; 0x2986 <strnlen_P>
    2754:	8c 01       	movw	r16, r24
    2756:	50 e8       	ldi	r21, 0x80	; 128
    2758:	f5 2a       	or	r15, r21
    275a:	f3 fe       	sbrs	r15, 3
    275c:	07 c0       	rjmp	.+14     	; 0x276c <vfprintf+0x1a0>
    275e:	1a c0       	rjmp	.+52     	; 0x2794 <vfprintf+0x1c8>
    2760:	80 e2       	ldi	r24, 0x20	; 32
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	b3 01       	movw	r22, r6
    2766:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <fputc>
    276a:	ea 94       	dec	r14
    276c:	8e 2d       	mov	r24, r14
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	08 17       	cp	r16, r24
    2772:	19 07       	cpc	r17, r25
    2774:	a8 f3       	brcs	.-22     	; 0x2760 <vfprintf+0x194>
    2776:	0e c0       	rjmp	.+28     	; 0x2794 <vfprintf+0x1c8>
    2778:	f6 01       	movw	r30, r12
    277a:	f7 fc       	sbrc	r15, 7
    277c:	85 91       	lpm	r24, Z+
    277e:	f7 fe       	sbrs	r15, 7
    2780:	81 91       	ld	r24, Z+
    2782:	6f 01       	movw	r12, r30
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	b3 01       	movw	r22, r6
    2788:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <fputc>
    278c:	e1 10       	cpse	r14, r1
    278e:	ea 94       	dec	r14
    2790:	01 50       	subi	r16, 0x01	; 1
    2792:	10 40       	sbci	r17, 0x00	; 0
    2794:	01 15       	cp	r16, r1
    2796:	11 05       	cpc	r17, r1
    2798:	79 f7       	brne	.-34     	; 0x2778 <vfprintf+0x1ac>
    279a:	ea c0       	rjmp	.+468    	; 0x2970 <vfprintf+0x3a4>
    279c:	94 36       	cpi	r25, 0x64	; 100
    279e:	11 f0       	breq	.+4      	; 0x27a4 <vfprintf+0x1d8>
    27a0:	99 36       	cpi	r25, 0x69	; 105
    27a2:	69 f5       	brne	.+90     	; 0x27fe <vfprintf+0x232>
    27a4:	f7 fe       	sbrs	r15, 7
    27a6:	08 c0       	rjmp	.+16     	; 0x27b8 <vfprintf+0x1ec>
    27a8:	f5 01       	movw	r30, r10
    27aa:	20 81       	ld	r18, Z
    27ac:	31 81       	ldd	r19, Z+1	; 0x01
    27ae:	42 81       	ldd	r20, Z+2	; 0x02
    27b0:	53 81       	ldd	r21, Z+3	; 0x03
    27b2:	84 e0       	ldi	r24, 0x04	; 4
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	0a c0       	rjmp	.+20     	; 0x27cc <vfprintf+0x200>
    27b8:	f5 01       	movw	r30, r10
    27ba:	80 81       	ld	r24, Z
    27bc:	91 81       	ldd	r25, Z+1	; 0x01
    27be:	9c 01       	movw	r18, r24
    27c0:	44 27       	eor	r20, r20
    27c2:	37 fd       	sbrc	r19, 7
    27c4:	40 95       	com	r20
    27c6:	54 2f       	mov	r21, r20
    27c8:	82 e0       	ldi	r24, 0x02	; 2
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	a8 0e       	add	r10, r24
    27ce:	b9 1e       	adc	r11, r25
    27d0:	9f e6       	ldi	r25, 0x6F	; 111
    27d2:	f9 22       	and	r15, r25
    27d4:	57 ff       	sbrs	r21, 7
    27d6:	09 c0       	rjmp	.+18     	; 0x27ea <vfprintf+0x21e>
    27d8:	50 95       	com	r21
    27da:	40 95       	com	r20
    27dc:	30 95       	com	r19
    27de:	21 95       	neg	r18
    27e0:	3f 4f       	sbci	r19, 0xFF	; 255
    27e2:	4f 4f       	sbci	r20, 0xFF	; 255
    27e4:	5f 4f       	sbci	r21, 0xFF	; 255
    27e6:	e0 e8       	ldi	r30, 0x80	; 128
    27e8:	fe 2a       	or	r15, r30
    27ea:	ca 01       	movw	r24, r20
    27ec:	b9 01       	movw	r22, r18
    27ee:	a1 01       	movw	r20, r2
    27f0:	2a e0       	ldi	r18, 0x0A	; 10
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <__ultoa_invert>
    27f8:	d8 2e       	mov	r13, r24
    27fa:	d2 18       	sub	r13, r2
    27fc:	40 c0       	rjmp	.+128    	; 0x287e <vfprintf+0x2b2>
    27fe:	95 37       	cpi	r25, 0x75	; 117
    2800:	29 f4       	brne	.+10     	; 0x280c <vfprintf+0x240>
    2802:	1f 2d       	mov	r17, r15
    2804:	1f 7e       	andi	r17, 0xEF	; 239
    2806:	2a e0       	ldi	r18, 0x0A	; 10
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	1d c0       	rjmp	.+58     	; 0x2846 <vfprintf+0x27a>
    280c:	1f 2d       	mov	r17, r15
    280e:	19 7f       	andi	r17, 0xF9	; 249
    2810:	9f 36       	cpi	r25, 0x6F	; 111
    2812:	61 f0       	breq	.+24     	; 0x282c <vfprintf+0x260>
    2814:	90 37       	cpi	r25, 0x70	; 112
    2816:	20 f4       	brcc	.+8      	; 0x2820 <vfprintf+0x254>
    2818:	98 35       	cpi	r25, 0x58	; 88
    281a:	09 f0       	breq	.+2      	; 0x281e <vfprintf+0x252>
    281c:	ac c0       	rjmp	.+344    	; 0x2976 <vfprintf+0x3aa>
    281e:	0f c0       	rjmp	.+30     	; 0x283e <vfprintf+0x272>
    2820:	90 37       	cpi	r25, 0x70	; 112
    2822:	39 f0       	breq	.+14     	; 0x2832 <vfprintf+0x266>
    2824:	98 37       	cpi	r25, 0x78	; 120
    2826:	09 f0       	breq	.+2      	; 0x282a <vfprintf+0x25e>
    2828:	a6 c0       	rjmp	.+332    	; 0x2976 <vfprintf+0x3aa>
    282a:	04 c0       	rjmp	.+8      	; 0x2834 <vfprintf+0x268>
    282c:	28 e0       	ldi	r18, 0x08	; 8
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	0a c0       	rjmp	.+20     	; 0x2846 <vfprintf+0x27a>
    2832:	10 61       	ori	r17, 0x10	; 16
    2834:	14 fd       	sbrc	r17, 4
    2836:	14 60       	ori	r17, 0x04	; 4
    2838:	20 e1       	ldi	r18, 0x10	; 16
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	04 c0       	rjmp	.+8      	; 0x2846 <vfprintf+0x27a>
    283e:	14 fd       	sbrc	r17, 4
    2840:	16 60       	ori	r17, 0x06	; 6
    2842:	20 e1       	ldi	r18, 0x10	; 16
    2844:	32 e0       	ldi	r19, 0x02	; 2
    2846:	17 ff       	sbrs	r17, 7
    2848:	08 c0       	rjmp	.+16     	; 0x285a <vfprintf+0x28e>
    284a:	f5 01       	movw	r30, r10
    284c:	60 81       	ld	r22, Z
    284e:	71 81       	ldd	r23, Z+1	; 0x01
    2850:	82 81       	ldd	r24, Z+2	; 0x02
    2852:	93 81       	ldd	r25, Z+3	; 0x03
    2854:	44 e0       	ldi	r20, 0x04	; 4
    2856:	50 e0       	ldi	r21, 0x00	; 0
    2858:	08 c0       	rjmp	.+16     	; 0x286a <vfprintf+0x29e>
    285a:	f5 01       	movw	r30, r10
    285c:	80 81       	ld	r24, Z
    285e:	91 81       	ldd	r25, Z+1	; 0x01
    2860:	bc 01       	movw	r22, r24
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	42 e0       	ldi	r20, 0x02	; 2
    2868:	50 e0       	ldi	r21, 0x00	; 0
    286a:	a4 0e       	add	r10, r20
    286c:	b5 1e       	adc	r11, r21
    286e:	a1 01       	movw	r20, r2
    2870:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <__ultoa_invert>
    2874:	d8 2e       	mov	r13, r24
    2876:	d2 18       	sub	r13, r2
    2878:	8f e7       	ldi	r24, 0x7F	; 127
    287a:	f8 2e       	mov	r15, r24
    287c:	f1 22       	and	r15, r17
    287e:	f6 fe       	sbrs	r15, 6
    2880:	0b c0       	rjmp	.+22     	; 0x2898 <vfprintf+0x2cc>
    2882:	5e ef       	ldi	r21, 0xFE	; 254
    2884:	f5 22       	and	r15, r21
    2886:	d9 14       	cp	r13, r9
    2888:	38 f4       	brcc	.+14     	; 0x2898 <vfprintf+0x2cc>
    288a:	f4 fe       	sbrs	r15, 4
    288c:	07 c0       	rjmp	.+14     	; 0x289c <vfprintf+0x2d0>
    288e:	f2 fc       	sbrc	r15, 2
    2890:	05 c0       	rjmp	.+10     	; 0x289c <vfprintf+0x2d0>
    2892:	8f ee       	ldi	r24, 0xEF	; 239
    2894:	f8 22       	and	r15, r24
    2896:	02 c0       	rjmp	.+4      	; 0x289c <vfprintf+0x2d0>
    2898:	1d 2d       	mov	r17, r13
    289a:	01 c0       	rjmp	.+2      	; 0x289e <vfprintf+0x2d2>
    289c:	19 2d       	mov	r17, r9
    289e:	f4 fe       	sbrs	r15, 4
    28a0:	0d c0       	rjmp	.+26     	; 0x28bc <vfprintf+0x2f0>
    28a2:	fe 01       	movw	r30, r28
    28a4:	ed 0d       	add	r30, r13
    28a6:	f1 1d       	adc	r31, r1
    28a8:	80 81       	ld	r24, Z
    28aa:	80 33       	cpi	r24, 0x30	; 48
    28ac:	19 f4       	brne	.+6      	; 0x28b4 <vfprintf+0x2e8>
    28ae:	99 ee       	ldi	r25, 0xE9	; 233
    28b0:	f9 22       	and	r15, r25
    28b2:	08 c0       	rjmp	.+16     	; 0x28c4 <vfprintf+0x2f8>
    28b4:	1f 5f       	subi	r17, 0xFF	; 255
    28b6:	f2 fe       	sbrs	r15, 2
    28b8:	05 c0       	rjmp	.+10     	; 0x28c4 <vfprintf+0x2f8>
    28ba:	03 c0       	rjmp	.+6      	; 0x28c2 <vfprintf+0x2f6>
    28bc:	8f 2d       	mov	r24, r15
    28be:	86 78       	andi	r24, 0x86	; 134
    28c0:	09 f0       	breq	.+2      	; 0x28c4 <vfprintf+0x2f8>
    28c2:	1f 5f       	subi	r17, 0xFF	; 255
    28c4:	0f 2d       	mov	r16, r15
    28c6:	f3 fc       	sbrc	r15, 3
    28c8:	14 c0       	rjmp	.+40     	; 0x28f2 <vfprintf+0x326>
    28ca:	f0 fe       	sbrs	r15, 0
    28cc:	0f c0       	rjmp	.+30     	; 0x28ec <vfprintf+0x320>
    28ce:	1e 15       	cp	r17, r14
    28d0:	10 f0       	brcs	.+4      	; 0x28d6 <vfprintf+0x30a>
    28d2:	9d 2c       	mov	r9, r13
    28d4:	0b c0       	rjmp	.+22     	; 0x28ec <vfprintf+0x320>
    28d6:	9d 2c       	mov	r9, r13
    28d8:	9e 0c       	add	r9, r14
    28da:	91 1a       	sub	r9, r17
    28dc:	1e 2d       	mov	r17, r14
    28de:	06 c0       	rjmp	.+12     	; 0x28ec <vfprintf+0x320>
    28e0:	80 e2       	ldi	r24, 0x20	; 32
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	b3 01       	movw	r22, r6
    28e6:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <fputc>
    28ea:	1f 5f       	subi	r17, 0xFF	; 255
    28ec:	1e 15       	cp	r17, r14
    28ee:	c0 f3       	brcs	.-16     	; 0x28e0 <vfprintf+0x314>
    28f0:	04 c0       	rjmp	.+8      	; 0x28fa <vfprintf+0x32e>
    28f2:	1e 15       	cp	r17, r14
    28f4:	10 f4       	brcc	.+4      	; 0x28fa <vfprintf+0x32e>
    28f6:	e1 1a       	sub	r14, r17
    28f8:	01 c0       	rjmp	.+2      	; 0x28fc <vfprintf+0x330>
    28fa:	ee 24       	eor	r14, r14
    28fc:	04 ff       	sbrs	r16, 4
    28fe:	0f c0       	rjmp	.+30     	; 0x291e <vfprintf+0x352>
    2900:	80 e3       	ldi	r24, 0x30	; 48
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	b3 01       	movw	r22, r6
    2906:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <fputc>
    290a:	02 ff       	sbrs	r16, 2
    290c:	1d c0       	rjmp	.+58     	; 0x2948 <vfprintf+0x37c>
    290e:	01 fd       	sbrc	r16, 1
    2910:	03 c0       	rjmp	.+6      	; 0x2918 <vfprintf+0x34c>
    2912:	88 e7       	ldi	r24, 0x78	; 120
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	0e c0       	rjmp	.+28     	; 0x2934 <vfprintf+0x368>
    2918:	88 e5       	ldi	r24, 0x58	; 88
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	0b c0       	rjmp	.+22     	; 0x2934 <vfprintf+0x368>
    291e:	80 2f       	mov	r24, r16
    2920:	86 78       	andi	r24, 0x86	; 134
    2922:	91 f0       	breq	.+36     	; 0x2948 <vfprintf+0x37c>
    2924:	01 ff       	sbrs	r16, 1
    2926:	02 c0       	rjmp	.+4      	; 0x292c <vfprintf+0x360>
    2928:	8b e2       	ldi	r24, 0x2B	; 43
    292a:	01 c0       	rjmp	.+2      	; 0x292e <vfprintf+0x362>
    292c:	80 e2       	ldi	r24, 0x20	; 32
    292e:	f7 fc       	sbrc	r15, 7
    2930:	8d e2       	ldi	r24, 0x2D	; 45
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	b3 01       	movw	r22, r6
    2936:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <fputc>
    293a:	06 c0       	rjmp	.+12     	; 0x2948 <vfprintf+0x37c>
    293c:	80 e3       	ldi	r24, 0x30	; 48
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	b3 01       	movw	r22, r6
    2942:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <fputc>
    2946:	9a 94       	dec	r9
    2948:	d9 14       	cp	r13, r9
    294a:	c0 f3       	brcs	.-16     	; 0x293c <vfprintf+0x370>
    294c:	da 94       	dec	r13
    294e:	f1 01       	movw	r30, r2
    2950:	ed 0d       	add	r30, r13
    2952:	f1 1d       	adc	r31, r1
    2954:	80 81       	ld	r24, Z
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	b3 01       	movw	r22, r6
    295a:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <fputc>
    295e:	dd 20       	and	r13, r13
    2960:	a9 f7       	brne	.-22     	; 0x294c <vfprintf+0x380>
    2962:	06 c0       	rjmp	.+12     	; 0x2970 <vfprintf+0x3a4>
    2964:	80 e2       	ldi	r24, 0x20	; 32
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	b3 01       	movw	r22, r6
    296a:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <fputc>
    296e:	ea 94       	dec	r14
    2970:	ee 20       	and	r14, r14
    2972:	c1 f7       	brne	.-16     	; 0x2964 <vfprintf+0x398>
    2974:	43 ce       	rjmp	.-890    	; 0x25fc <vfprintf+0x30>
    2976:	f3 01       	movw	r30, r6
    2978:	66 81       	ldd	r22, Z+6	; 0x06
    297a:	77 81       	ldd	r23, Z+7	; 0x07
    297c:	cb 01       	movw	r24, r22
    297e:	2b 96       	adiw	r28, 0x0b	; 11
    2980:	e2 e1       	ldi	r30, 0x12	; 18
    2982:	0c 94 62 12 	jmp	0x24c4	; 0x24c4 <__epilogue_restores__>

00002986 <strnlen_P>:
    2986:	fc 01       	movw	r30, r24
    2988:	05 90       	lpm	r0, Z+
    298a:	61 50       	subi	r22, 0x01	; 1
    298c:	70 40       	sbci	r23, 0x00	; 0
    298e:	01 10       	cpse	r0, r1
    2990:	d8 f7       	brcc	.-10     	; 0x2988 <strnlen_P+0x2>
    2992:	80 95       	com	r24
    2994:	90 95       	com	r25
    2996:	8e 0f       	add	r24, r30
    2998:	9f 1f       	adc	r25, r31
    299a:	08 95       	ret

0000299c <strnlen>:
    299c:	fc 01       	movw	r30, r24
    299e:	61 50       	subi	r22, 0x01	; 1
    29a0:	70 40       	sbci	r23, 0x00	; 0
    29a2:	01 90       	ld	r0, Z+
    29a4:	01 10       	cpse	r0, r1
    29a6:	d8 f7       	brcc	.-10     	; 0x299e <strnlen+0x2>
    29a8:	80 95       	com	r24
    29aa:	90 95       	com	r25
    29ac:	8e 0f       	add	r24, r30
    29ae:	9f 1f       	adc	r25, r31
    29b0:	08 95       	ret

000029b2 <fputc>:
    29b2:	0f 93       	push	r16
    29b4:	1f 93       	push	r17
    29b6:	cf 93       	push	r28
    29b8:	df 93       	push	r29
    29ba:	8c 01       	movw	r16, r24
    29bc:	eb 01       	movw	r28, r22
    29be:	8b 81       	ldd	r24, Y+3	; 0x03
    29c0:	81 ff       	sbrs	r24, 1
    29c2:	1b c0       	rjmp	.+54     	; 0x29fa <fputc+0x48>
    29c4:	82 ff       	sbrs	r24, 2
    29c6:	0d c0       	rjmp	.+26     	; 0x29e2 <fputc+0x30>
    29c8:	2e 81       	ldd	r18, Y+6	; 0x06
    29ca:	3f 81       	ldd	r19, Y+7	; 0x07
    29cc:	8c 81       	ldd	r24, Y+4	; 0x04
    29ce:	9d 81       	ldd	r25, Y+5	; 0x05
    29d0:	28 17       	cp	r18, r24
    29d2:	39 07       	cpc	r19, r25
    29d4:	64 f4       	brge	.+24     	; 0x29ee <fputc+0x3c>
    29d6:	e8 81       	ld	r30, Y
    29d8:	f9 81       	ldd	r31, Y+1	; 0x01
    29da:	01 93       	st	Z+, r16
    29dc:	f9 83       	std	Y+1, r31	; 0x01
    29de:	e8 83       	st	Y, r30
    29e0:	06 c0       	rjmp	.+12     	; 0x29ee <fputc+0x3c>
    29e2:	e8 85       	ldd	r30, Y+8	; 0x08
    29e4:	f9 85       	ldd	r31, Y+9	; 0x09
    29e6:	80 2f       	mov	r24, r16
    29e8:	09 95       	icall
    29ea:	89 2b       	or	r24, r25
    29ec:	31 f4       	brne	.+12     	; 0x29fa <fputc+0x48>
    29ee:	8e 81       	ldd	r24, Y+6	; 0x06
    29f0:	9f 81       	ldd	r25, Y+7	; 0x07
    29f2:	01 96       	adiw	r24, 0x01	; 1
    29f4:	9f 83       	std	Y+7, r25	; 0x07
    29f6:	8e 83       	std	Y+6, r24	; 0x06
    29f8:	02 c0       	rjmp	.+4      	; 0x29fe <fputc+0x4c>
    29fa:	0f ef       	ldi	r16, 0xFF	; 255
    29fc:	1f ef       	ldi	r17, 0xFF	; 255
    29fe:	c8 01       	movw	r24, r16
    2a00:	df 91       	pop	r29
    2a02:	cf 91       	pop	r28
    2a04:	1f 91       	pop	r17
    2a06:	0f 91       	pop	r16
    2a08:	08 95       	ret

00002a0a <__ultoa_invert>:
    2a0a:	fa 01       	movw	r30, r20
    2a0c:	aa 27       	eor	r26, r26
    2a0e:	28 30       	cpi	r18, 0x08	; 8
    2a10:	51 f1       	breq	.+84     	; 0x2a66 <__ultoa_invert+0x5c>
    2a12:	20 31       	cpi	r18, 0x10	; 16
    2a14:	81 f1       	breq	.+96     	; 0x2a76 <__ultoa_invert+0x6c>
    2a16:	e8 94       	clt
    2a18:	6f 93       	push	r22
    2a1a:	6e 7f       	andi	r22, 0xFE	; 254
    2a1c:	6e 5f       	subi	r22, 0xFE	; 254
    2a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a20:	8f 4f       	sbci	r24, 0xFF	; 255
    2a22:	9f 4f       	sbci	r25, 0xFF	; 255
    2a24:	af 4f       	sbci	r26, 0xFF	; 255
    2a26:	b1 e0       	ldi	r27, 0x01	; 1
    2a28:	3e d0       	rcall	.+124    	; 0x2aa6 <__ultoa_invert+0x9c>
    2a2a:	b4 e0       	ldi	r27, 0x04	; 4
    2a2c:	3c d0       	rcall	.+120    	; 0x2aa6 <__ultoa_invert+0x9c>
    2a2e:	67 0f       	add	r22, r23
    2a30:	78 1f       	adc	r23, r24
    2a32:	89 1f       	adc	r24, r25
    2a34:	9a 1f       	adc	r25, r26
    2a36:	a1 1d       	adc	r26, r1
    2a38:	68 0f       	add	r22, r24
    2a3a:	79 1f       	adc	r23, r25
    2a3c:	8a 1f       	adc	r24, r26
    2a3e:	91 1d       	adc	r25, r1
    2a40:	a1 1d       	adc	r26, r1
    2a42:	6a 0f       	add	r22, r26
    2a44:	71 1d       	adc	r23, r1
    2a46:	81 1d       	adc	r24, r1
    2a48:	91 1d       	adc	r25, r1
    2a4a:	a1 1d       	adc	r26, r1
    2a4c:	20 d0       	rcall	.+64     	; 0x2a8e <__ultoa_invert+0x84>
    2a4e:	09 f4       	brne	.+2      	; 0x2a52 <__ultoa_invert+0x48>
    2a50:	68 94       	set
    2a52:	3f 91       	pop	r19
    2a54:	2a e0       	ldi	r18, 0x0A	; 10
    2a56:	26 9f       	mul	r18, r22
    2a58:	11 24       	eor	r1, r1
    2a5a:	30 19       	sub	r19, r0
    2a5c:	30 5d       	subi	r19, 0xD0	; 208
    2a5e:	31 93       	st	Z+, r19
    2a60:	de f6       	brtc	.-74     	; 0x2a18 <__ultoa_invert+0xe>
    2a62:	cf 01       	movw	r24, r30
    2a64:	08 95       	ret
    2a66:	46 2f       	mov	r20, r22
    2a68:	47 70       	andi	r20, 0x07	; 7
    2a6a:	40 5d       	subi	r20, 0xD0	; 208
    2a6c:	41 93       	st	Z+, r20
    2a6e:	b3 e0       	ldi	r27, 0x03	; 3
    2a70:	0f d0       	rcall	.+30     	; 0x2a90 <__ultoa_invert+0x86>
    2a72:	c9 f7       	brne	.-14     	; 0x2a66 <__ultoa_invert+0x5c>
    2a74:	f6 cf       	rjmp	.-20     	; 0x2a62 <__ultoa_invert+0x58>
    2a76:	46 2f       	mov	r20, r22
    2a78:	4f 70       	andi	r20, 0x0F	; 15
    2a7a:	40 5d       	subi	r20, 0xD0	; 208
    2a7c:	4a 33       	cpi	r20, 0x3A	; 58
    2a7e:	18 f0       	brcs	.+6      	; 0x2a86 <__ultoa_invert+0x7c>
    2a80:	49 5d       	subi	r20, 0xD9	; 217
    2a82:	31 fd       	sbrc	r19, 1
    2a84:	40 52       	subi	r20, 0x20	; 32
    2a86:	41 93       	st	Z+, r20
    2a88:	02 d0       	rcall	.+4      	; 0x2a8e <__ultoa_invert+0x84>
    2a8a:	a9 f7       	brne	.-22     	; 0x2a76 <__ultoa_invert+0x6c>
    2a8c:	ea cf       	rjmp	.-44     	; 0x2a62 <__ultoa_invert+0x58>
    2a8e:	b4 e0       	ldi	r27, 0x04	; 4
    2a90:	a6 95       	lsr	r26
    2a92:	97 95       	ror	r25
    2a94:	87 95       	ror	r24
    2a96:	77 95       	ror	r23
    2a98:	67 95       	ror	r22
    2a9a:	ba 95       	dec	r27
    2a9c:	c9 f7       	brne	.-14     	; 0x2a90 <__ultoa_invert+0x86>
    2a9e:	00 97       	sbiw	r24, 0x00	; 0
    2aa0:	61 05       	cpc	r22, r1
    2aa2:	71 05       	cpc	r23, r1
    2aa4:	08 95       	ret
    2aa6:	9b 01       	movw	r18, r22
    2aa8:	ac 01       	movw	r20, r24
    2aaa:	0a 2e       	mov	r0, r26
    2aac:	06 94       	lsr	r0
    2aae:	57 95       	ror	r21
    2ab0:	47 95       	ror	r20
    2ab2:	37 95       	ror	r19
    2ab4:	27 95       	ror	r18
    2ab6:	ba 95       	dec	r27
    2ab8:	c9 f7       	brne	.-14     	; 0x2aac <__ultoa_invert+0xa2>
    2aba:	62 0f       	add	r22, r18
    2abc:	73 1f       	adc	r23, r19
    2abe:	84 1f       	adc	r24, r20
    2ac0:	95 1f       	adc	r25, r21
    2ac2:	a0 1d       	adc	r26, r0
    2ac4:	08 95       	ret

00002ac6 <_exit>:
    2ac6:	f8 94       	cli

00002ac8 <__stop_program>:
    2ac8:	ff cf       	rjmp	.-2      	; 0x2ac8 <__stop_program>
